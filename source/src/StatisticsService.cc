/*
 *
 * DQMStatisticsService.cc source template automatically generated by a class generator
 * Creation date : lun. dï¿½c. 14 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

// -- dqm4hep headers
#include "dqm4hep/StatisticsService.h"

// -- std headers
#include <numeric>

namespace dqm4hep {

  namespace core {

    StatisticsService::StatisticsService(const std::string &baseServiceName)
    {
      m_lastStatsTimestamp = 0;
      m_rate = 0;
      m_meanStats = 0;
      m_lastStatistics = 0;

      m_pLastUpdateTimeService = new DimService((baseServiceName + "/LAST_UPDATE_TIME").c_str(), m_lastStatsTimestamp);
      m_pRateService = new DimService((baseServiceName + "/RATE").c_str(), m_rate);
      m_pMeanStatsService = new DimService((baseServiceName + "/MEAN_STATS").c_str(), m_meanStats);
      m_pLastUpdateStatisticsService = new DimService((baseServiceName + "/LAST_UPDATE_STATS").c_str(), m_lastStatistics);
    }

    //-------------------------------------------------------------------------------------------------

    StatisticsService::~StatisticsService()
    {
      delete m_pLastUpdateTimeService;
      delete m_pRateService;
      delete m_pMeanStatsService;
      delete m_pLastUpdateStatisticsService;
    }

    //-------------------------------------------------------------------------------------------------

    void StatisticsService::update(unsigned int statistics)
    {
      if(m_statsList.size() == 1000)
        m_statsList.erase(m_statsList.begin());

      Stats stats;
      stats.m_timeStamp = time(0);
      stats.m_statistics = statistics;
      m_statsList.push_back(stats);

      float timeDif = static_cast<float>(difftime((*(m_statsList.end()-1)).m_timeStamp, (*m_statsList.begin()).m_timeStamp));

      // WARNING !! wrong calculation but avoid NaN
      if(timeDif - 0.f < std::numeric_limits<float>::epsilon())
        timeDif = 1.f;

      m_lastStatsTimestamp = stats.m_timeStamp;
      m_rate = static_cast<float>(m_statsList.size()) / static_cast<float>(timeDif);
      m_meanStats = static_cast<float>(std::accumulate(m_statsList.begin(), m_statsList.end(), 0, StatisticsService::accumulateStats)) / static_cast<float>(m_statsList.size());
      m_lastStatistics = statistics;

      m_pLastUpdateTimeService->updateService(m_lastStatsTimestamp);
      m_pRateService->updateService(m_rate);
      m_pMeanStatsService->updateService(m_meanStats);
      m_pLastUpdateStatisticsService->updateService(m_lastStatistics);
    }

    //-------------------------------------------------------------------------------------------------

    unsigned int StatisticsService::accumulateStats(unsigned int sum, const Stats &stats)
    {
      return sum + stats.m_statistics;
    }

  }

} 

