  /// \file Summary.cc
/*
 *
 * Summary.cc source template automatically generated by a class generator
 * Creation date : jeu. fï¿½vr. 2 2017
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "dqm4hep/Summary.h"

namespace dqm4hep {

  namespace core {

    Summary::Summary() :
      MonitorObject()
    {
      /* nop */
    }

    //-------------------------------------------------------------------------------------------------

    Summary::Summary(const std::string &header) :
      MonitorObject(),
      m_header(header)
    {
      /* nop */
    }

    //-------------------------------------------------------------------------------------------------

    Summary::~Summary()
    {
      clear();
    }

    //-------------------------------------------------------------------------------------------------

    Summary *Summary::create(const Json::Value &value)
    {
      Summary *pSummary = new Summary();
      pSummary->fromJson(value);

      return pSummary;
    }

    //-------------------------------------------------------------------------------------------------

    void Summary::setHeader(const std::string &header)
    {
      bool updated(false);

      if(m_header != header)
      {
        m_updateCache.set(HEADER, true);
        updated = true;
      }

      m_header = header;

      if(updated)
        this->updated(HEADER);
    }

    //-------------------------------------------------------------------------------------------------

    const std::string &Summary::getHeader() const
    {
      return m_header;
    }

    //-------------------------------------------------------------------------------------------------

    void Summary::setEntry(const std::string &entry, const std::string &text)
    {
      m_updateCache.set(ENTRIES, true);
      m_entries[entry] = text;
      this->updated(ENTRIES);
    }

    //-------------------------------------------------------------------------------------------------

    void Summary::removeEntry(const std::string &entry)
    {
      auto findIter = m_entries.find(entry);

      if(findIter != m_entries.end())
      {
        m_entries.erase(findIter);
        m_updateCache.set(ENTRIES, true);
        this->updated(ENTRIES);
      }
    }

    //-------------------------------------------------------------------------------------------------

    void Summary::clear()
    {
      if(!m_header.empty())
      {
        m_updateCache.set(HEADER, true);
        m_header.clear();
        this->updated(HEADER);
      }

      if(!m_entries.empty())
      {
        m_updateCache.set(ENTRIES, true);
        m_entries.clear();
        this->updated(ENTRIES);
      }
    }

    //-------------------------------------------------------------------------------------------------

    bool Summary::isUpToDate() const
    {
      return m_updateCache.none();
    }

    //-------------------------------------------------------------------------------------------------

    void Summary::fromJson(const Json::Value &value)
    {
      const std::string readMode(value.get("mode", "full").asString());

      if(readMode == "full")
        this->clear();

      m_header = value.get("header", m_header).asString();

      Json::Value entryValues(value.get("entries", Json::Value()));

      for(unsigned int e=0 ; e<entryValues.size() ; e++)
      {
        Json::Value entryValue(entryValues[e]);

        const std::string name(entryValue.get("name", "").asString());
        const std::string text(entryValue.get("text", 0.f).asString());

        if(name.empty() || text.empty())
          continue;

        this->setEntry(name, text);
      }

      this->resetCache();
    }

    //-------------------------------------------------------------------------------------------------

    void Summary::toJson(Json::Value &value, bool full, bool resetCache)
    {
      value["mode"] = full ? "full" : "update";

      if( full || m_updateCache.test(HEADER))
        value["header"] = m_header;

      if( full || m_updateCache.test(ENTRIES))
      {
        Json::Value entryValues(Json::arrayValue);
        unsigned int index(0);

        for(auto iter = m_entries.begin(), endIter = m_entries.end() ; endIter != iter ; ++iter)
        {
          Json::Value entryValue;

          entryValue["name"] = iter->first;
          entryValue["text"] = iter->second;

          entryValues[index] = entryValue;
          ++index;
        }

        value["entries"] = entryValues;
      }

      if(resetCache)
        this->resetCache();
    }

    //-------------------------------------------------------------------------------------------------

    void Summary::resetCache()
    {
      m_updateCache.reset();
    }

    //-------------------------------------------------------------------------------------------------

    MonitorObjectType Summary::getType() const
    {
      return SUMMARY;
    }

  }

}
