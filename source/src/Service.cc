/// \file Service.cc
/*
 *
 * Service.cc source template automatically generated by a class generator
 * Creation date : sam. dï¿½c. 3 2016
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

// -- dqm4hep headers
#include "dqm4hep/Service.h"
#include "dqm4hep/base64.h"

// -- std headers
#include <sys/utsname.h>
#include <unistd.h>

namespace dqm4hep {

  namespace net {

    Service::Service(const std::string &type, const std::string &name) :
        m_type(type),
        m_name(name),
        m_fullName("/DQM4HEP/" + m_type + "/" + m_name),
        m_serviceContent("{}"),
        m_service(const_cast<char *>(m_fullName.c_str()), const_cast<char *>(m_serviceContent.c_str())),
        m_compressed(false)
    {
      /* nop */
    }

    //-------------------------------------------------------------------------------------------------

    Service::~Service()
    {
      /* nop */
    }

    //-------------------------------------------------------------------------------------------------

    void Service::update()
    {
      Json::Value value, content;
      Json::Value hostInfo, serviceInfo;

      this->writeContent(content);

      if(!m_compressed)
      {
        serviceInfo["type"] = m_type;
        serviceInfo["name"] = m_name;
        serviceInfo["fullName"] = m_fullName;
        value["service"] = serviceInfo;

        // uname
        struct utsname unameStruct;
        uname(&unameStruct);

        // host name
        char host[256];
        gethostname(host, 256);

        hostInfo["name"] = host;
        hostInfo["system"] = unameStruct.sysname;
        hostInfo["node"] = unameStruct.nodename;
        hostInfo["release"] = unameStruct.release;
        hostInfo["version"] = unameStruct.version;
        hostInfo["machine"] = unameStruct.machine;
        value["host"] = hostInfo;
      }

      value["type"] = this->getContentType();
      value["compressed"] = m_compressed;
      value["content"] = content;

      Json::FastWriter writer;

      m_serviceContent = writer.write(value);
      m_service.updateService(const_cast<char *>(m_serviceContent.c_str()));
    }

    //-------------------------------------------------------------------------------------------------

    const std::string &Service::getType() const
    {
      return m_type;
    }

    //-------------------------------------------------------------------------------------------------

    const std::string &Service::getName() const
    {
      return m_name;
    }

    //-------------------------------------------------------------------------------------------------

    const std::string &Service::getFullName() const
    {
      return m_fullName;
    }

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    BinaryService::BinaryService(const std::string &type, const std::string &name) :
      Service(type, name)
    {
      m_pBufferDevice = new xdrstream::BufferDevice();
    }


    BinaryService::~BinaryService()
    {
      delete m_pBufferDevice;
    }

    //-------------------------------------------------------------------------------------------------

    xdrstream::BufferDevice *BinaryService::getBufferDevice() const
    {
      return m_pBufferDevice;
    }

    //-------------------------------------------------------------------------------------------------

    void BinaryService::writeContent(Json::Value &value)
    {
      char *pBuffer(m_pBufferDevice->getBuffer());
      xdrstream::xdr_size_t bufferSize(m_pBufferDevice->getPosition());

      if(bufferSize == 0)
      {
        value["bin"] = "";
        return;
      }

      int base64_size(Base64encode_len(bufferSize));
      char *pBuffer64 = new char[base64_size];
      Base64encode(pBuffer64, pBuffer, bufferSize);

      value["bin"] = pBuffer64;
      value["size"] = base64_size;
      value["format"] = "base64";

      delete [] pBuffer64;
    }

    //-------------------------------------------------------------------------------------------------

    std::string BinaryService::getContentType() const
    {
      return "binary";
    }

  }
} 

