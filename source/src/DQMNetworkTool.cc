/// \file DQMNetworkTool.cc
/*
 *
 * DQMNetworkTool.cc source template automatically generated by a class generator
 * Creation date : mer. juin 17 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

// -- dqm4hep headers
#include "dqm4hep/DQMNetworkTool.h"

// -- std headers
#include <algorithm>

// -- dim headers
#include "dic.hxx"

namespace dqm4hep {

  namespace core {

    StringVector NetworkTool::getEventCollectors()
    {
      DimBrowser browser;
      std::string collectorBase = "DQM4HEP/EventCollector/";
      int nServers = browser.getServers();

      if(nServers == 0)
        return StringVector();

      char *pServer;
      char *pNode;

      StringVector collectorNameList;

      // iterates one servers
      while(browser.getNextServer(pServer, pNode))
      {
        std::string server = pServer;

        if(server.size() < collectorBase.size())
          continue;

        if(server.substr(0, collectorBase.size()) == collectorBase)
        {
          std::string collectorName = server.substr(collectorBase.size());
          collectorNameList.push_back(collectorName);
        }
      }

      return collectorNameList;
    }

    //-------------------------------------------------------------------------------------------------

    StringVector NetworkTool::getMonitorElementCollectors()
    {
      DimBrowser browser;
      std::string collectorBase = "DQM4HEP/MonitorElementCollector/";
      int nServers = browser.getServers();

      if(nServers == 0)
        return StringVector();

      char *pServer;
      char *pNode;

      StringVector collectorNameList;

      // iterates one servers
      while(browser.getNextServer(pServer, pNode))
      {
        std::string server = pServer;

        if(server.size() < collectorBase.size())
          continue;

        if(server.substr(0, collectorBase.size()) == collectorBase)
        {
          std::string collectorName = server.substr(collectorBase.size());
          collectorNameList.push_back(collectorName);
        }
      }

      return collectorNameList;
    }

    //-------------------------------------------------------------------------------------------------

    bool NetworkTool::eventCollectorExists(const std::string &collectorName)
    {
      // get the whole list
      StringVector eventCollectorList = NetworkTool::getEventCollectors();

      // and find the specific one
      return ( std::find(eventCollectorList.begin(), eventCollectorList.end(), collectorName) != eventCollectorList.end() );
    }

    //-------------------------------------------------------------------------------------------------

    bool NetworkTool::monitorElementCollectorExists(const std::string &collectorName)
    {
      // get the whole list
      StringVector monitorElementCollectorList = NetworkTool::getMonitorElementCollectors();

      // and find the specific one
      return ( std::find(monitorElementCollectorList.begin(), monitorElementCollectorList.end(), collectorName) != monitorElementCollectorList.end() );
    }

  }

}

