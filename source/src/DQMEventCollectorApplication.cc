/// \file DQMEventCollectorApplication.cc
/*
 *
 * DQMEventCollectorApplication.cc source template automatically generated by a class generator
 * Creation date : jeu. juin 18 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

// -- dqm4hep headers
#include "dqm4hep/DQMEventCollectorApplication.h"
#include "dqm4hep/DQMEventCollector.h"
#include "dqm4hep/DQMEventCollectorImp.h"
#include "dqm4hep/DQMLogging.h"
#include "dqm4hep/DQMCoreTool.h"

namespace dqm4hep {

  namespace core {

    EventCollectorApplication::EventCollectorApplication() :
        m_applicationState(STOPPED_STATE),
        m_shouldExit(false),
        m_type("EventCollector"),
        m_pEventCollector(NULL)
    {
      m_pEventCollector = new EventCollector();
    }

    //-------------------------------------------------------------------------------------------------

    EventCollectorApplication::~EventCollectorApplication()
    {
      if(m_pEventCollector->isRunning())
        m_pEventCollector->stopCollector();

      delete m_pEventCollector;
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode EventCollectorApplication::run()
    {
      if(m_applicationState == RUNNING_STATE)
        return STATUS_CODE_FAILURE;

      RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pEventCollector->startCollector());

      m_applicationState = RUNNING_STATE;

      while( ! m_shouldExit )
        CoreTool::sleep(std::chrono::seconds(1));

      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode EventCollectorApplication::exit( int returnCode )
    {
      if(m_applicationState == STOPPED_STATE)
        return STATUS_CODE_FAILURE;

      RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pEventCollector->stopCollector());

      m_shouldExit = true;
      m_applicationState = STOPPED_STATE;

      StatusCode returnStatusCode;

      if(returnCode >= 0 && returnCode < NUMBER_OF_STATUS_CODES)
        returnStatusCode = static_cast<StatusCode>(returnCode);
      else
        returnStatusCode = STATUS_CODE_FAILURE;

      return returnStatusCode;
    }

    //-------------------------------------------------------------------------------------------------

    const std::string &EventCollectorApplication::getName() const
    {
      return m_pEventCollector->getCollectorName();
    }

    //-------------------------------------------------------------------------------------------------

    const std::string &EventCollectorApplication::getType() const
    {
      return m_type;
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode EventCollectorApplication::setCollectorName(const std::string &collectorName)
    {
      return m_pEventCollector->setCollectorName(collectorName);
    }

    //-------------------------------------------------------------------------------------------------

    void EventCollectorApplication::setEventCollectorImp(EventCollectorImp *pCollectorImp)
    {
      if(NULL == pCollectorImp)
        return;

      m_pEventCollector->setEventCollectorImp(pCollectorImp);
    }

    //-------------------------------------------------------------------------------------------------

    void EventCollectorApplication::setEventStreamer(EventStreamer *pEventStreamer)
    {
      m_pEventCollector->setEventStreamer(pEventStreamer);
    }

    //-------------------------------------------------------------------------------------------------

    EventStreamer *EventCollectorApplication::getEventStreamer() const
    {
      return m_pEventCollector->getEventStreamer();
    }

  }

} 

