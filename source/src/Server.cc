/// \file Server.cc
/*
 *
 * Server.cc source template automatically generated by a class generator
 * Creation date : sam. dï¿½c. 3 2016
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "dqm4hep/Server.h"

namespace dqm4hep {

  namespace net {

    Server::Server(const std::string &name) :
        m_name(name),
        m_started(false)
    {
      /* nop */
    }

    //-------------------------------------------------------------------------------------------------

    Server::~Server()
    {
      this->stop();
      this->clear();
    }

    //-------------------------------------------------------------------------------------------------

    void Server::start()
    {
      if(m_started)
        return;

      DimServer::start(const_cast<char*>(m_name.c_str()));
      m_started = true;
    }

    //-------------------------------------------------------------------------------------------------

    void Server::stop()
    {
      if(!m_started)
        return;

      DimServer::stop();
      m_started = false;
    }

    //-------------------------------------------------------------------------------------------------

    void Server::clear()
    {
      for(auto iter = m_serviceMap.begin(), endIter = m_serviceMap.end() ; endIter != iter ; ++iter)
        delete iter->second;

      for(auto iter = m_requestHandlerMap.begin(), endIter = m_requestHandlerMap.end() ; endIter != iter ; ++iter)
        delete iter->second;

      m_serviceMap.clear();
      m_requestHandlerMap.clear();
    }

    //-------------------------------------------------------------------------------------------------

    bool Server::isServiceRegistered(const std::string &type, const std::string &name) const
    {
      return (m_serviceMap.find(Service::getFullServiceName(type, name)) != m_serviceMap.end());
    }

    //-------------------------------------------------------------------------------------------------

    bool Server::isRequestHandlerRegistered(const std::string &type, const std::string &name) const
    {
      return (m_requestHandlerMap.find(RequestHandler::getFullRequestHandlerName(type, name)) != m_requestHandlerMap.end());
    }

    //-------------------------------------------------------------------------------------------------

    Service *Server::getService(const std::string &type, const std::string &name) const
    {
      auto findIter = m_serviceMap.find(Service::getFullServiceName(type, name));
      return (findIter == m_serviceMap.end() ? nullptr : findIter->second);
    }

    //-------------------------------------------------------------------------------------------------

    RequestHandler *Server::getRequestHandler(const std::string &type, const std::string &name) const
    {
      auto findIter = m_requestHandlerMap.find(RequestHandler::getFullRequestHandlerName(type, name));
      return (findIter == m_requestHandlerMap.end() ? nullptr : findIter->second);
    }

    //-------------------------------------------------------------------------------------------------

    std::string Server::getDnsNode()
    {
      char *pDnsNode = DimServer::getDnsNode();

      if(pDnsNode)
        return pDnsNode;

      pDnsNode = getenv("DIM_DNS_NODE");
      return (pDnsNode ? pDnsNode : "");
    }

    //-------------------------------------------------------------------------------------------------

    int Server::getDnsPort()
    {
      return DimServer::getDnsPort();
    }

  }


} 

