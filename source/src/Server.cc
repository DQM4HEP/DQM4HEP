/// \file Server.cc
/*
 *
 * Server.cc source template automatically generated by a class generator
 * Creation date : sam. dï¿½c. 3 2016
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

// -- dqm4hep headers
#include "dqm4hep/Server.h"

// -- std headers
#include <sys/utsname.h>
#include <unistd.h>
#include "dic.hxx"

namespace dqm4hep {

  namespace net {

    Server::Server(const std::string &name) :
        m_name(name),
        m_started(false),
        m_serverInfoHandler(this, m_name, "info", this, &Server::handleServerInfoRequest)
    {
      /* nop */
    }

    //-------------------------------------------------------------------------------------------------

    Server::~Server()
    {
      this->stop();
      this->clear();
    }

    //-------------------------------------------------------------------------------------------------

    void Server::start()
    {
      if(m_started)
        return;

      std::string dimServerName(Server::getFullServerName(m_name));
      DimServer::start(const_cast<char*>(dimServerName.c_str()));
      m_started = true;
    }

    //-------------------------------------------------------------------------------------------------

    void Server::stop()
    {
      if(!m_started)
        return;

      DimServer::stop();
      m_started = false;
    }

    //-------------------------------------------------------------------------------------------------

    void Server::clear()
    {
      for(auto iter = m_serviceMap.begin(), endIter = m_serviceMap.end() ; endIter != iter ; ++iter)
        delete iter->second;

      for(auto iter = m_requestHandlerMap.begin(), endIter = m_requestHandlerMap.end() ; endIter != iter ; ++iter)
        delete iter->second;

      m_serviceMap.clear();
      m_requestHandlerMap.clear();
    }

    Service *Server::createService(const std::string &type, const std::string &name)
    {
      const std::string fullServiceName(Service::getFullServiceName(type, name));

      auto findIter = m_serviceMap.find(fullServiceName);

      if(findIter != m_serviceMap.end())
        return findIter->second;

      // first insert nullptr, then create service
      std::pair<ServiceMap::iterator, bool> inserted = m_serviceMap.insert(ServiceMap::value_type(fullServiceName, nullptr));

      if(inserted.second)
      {
        inserted.first->second = new Service(this, type, name);;
        return inserted.first->second;
      }
      else
        throw;
    }

    //-------------------------------------------------------------------------------------------------

    bool Server::isServiceRegistered(const std::string &type, const std::string &name) const
    {
      return (m_serviceMap.find(Service::getFullServiceName(type, name)) != m_serviceMap.end());
    }

    //-------------------------------------------------------------------------------------------------

    bool Server::isRequestHandlerRegistered(const std::string &type, const std::string &name) const
    {
      return (m_requestHandlerMap.find(RequestHandler::getFullRequestHandlerName(type, name)) != m_requestHandlerMap.end());
    }

    //-------------------------------------------------------------------------------------------------

    Service *Server::getService(const std::string &type, const std::string &name) const
    {
      auto findIter = m_serviceMap.find(Service::getFullServiceName(type, name));
      return (findIter == m_serviceMap.end() ? nullptr : findIter->second);
    }

    //-------------------------------------------------------------------------------------------------

    RequestHandler *Server::getRequestHandler(const std::string &type, const std::string &name) const
    {
      auto findIter = m_requestHandlerMap.find(RequestHandler::getFullRequestHandlerName(type, name));
      return (findIter == m_requestHandlerMap.end() ? nullptr : findIter->second);
    }

    //-------------------------------------------------------------------------------------------------

    std::string Server::getDnsNode()
    {
      char *pDnsNode = DimServer::getDnsNode();

      if(pDnsNode)
        return pDnsNode;

      pDnsNode = getenv("DIM_DNS_NODE");
      return (pDnsNode ? pDnsNode : "");
    }

    //-------------------------------------------------------------------------------------------------

    int Server::getDnsPort()
    {
      return DimServer::getDnsPort();
    }

    //-------------------------------------------------------------------------------------------------

    std::string Server::getFullServerName(const std::string &serverName)
    {
      return ("dqm4hep/" + serverName);
    }

    //-------------------------------------------------------------------------------------------------

    std::vector<std::string> Server::getRunningServers()
    {
      std::vector<std::string> runningServers;

      DimBrowser browser;
      browser.getServers();
      char *pServer, *pNode;

      while(browser.getNextServer(pServer, pNode))
      {
        std::string server(pServer);

        if(server.substr(0, std::string("dqm4hep/").size()) == "dqm4hep/")
          runningServers.push_back(server.substr(std::string("dqm4hep/").size()));
      }

      return runningServers;
    }

    //-------------------------------------------------------------------------------------------------

    bool Server::isServerRunning(const std::string &serverName)
    {
      DimBrowser browser;
      browser.getServers();
      char *pServer, *pNode;

      while(browser.getNextServer(pServer, pNode))
      {
        std::string server(pServer);

        if(server.substr(0, std::string("dqm4hep/").size()) == "dqm4hep/")
        {
          std::string realServerName(server.substr(std::string("dqm4hep/").size()));

          if(realServerName == serverName)
            return true;
        }
      }

      return false;
    }

    //-------------------------------------------------------------------------------------------------

    void Server::handleServerInfoRequest(const Json::Value &/*request*/, Json::Value &response)
    {
      Json::Value serverInfo;
      serverInfo["name"] = m_name;
      response["server"] = serverInfo;

      // uname
      struct utsname unameStruct;
      uname(&unameStruct);

      // host name
      char host[256];
      gethostname(host, 256);

      Json::Value hostInfo;
      hostInfo["name"] = host;
      hostInfo["system"] = unameStruct.sysname;
      hostInfo["node"] = unameStruct.nodename;
      hostInfo["release"] = unameStruct.release;
      hostInfo["version"] = unameStruct.version;
      hostInfo["machine"] = unameStruct.machine;
      response["host"] = hostInfo;

      Json::Value servicesInfo;
      unsigned int index(0);

      for(auto iter = m_serviceMap.begin(), endIter = m_serviceMap.end() ; endIter != iter ; ++iter)
      {
        const std::string &type(iter->second->getType());
        const std::string &name(iter->second->getName());

        Json::Value serviceInfo;
        serviceInfo["type"] = type;
        serviceInfo["name"] = name;
        servicesInfo[index] = serviceInfo;

        ++index;
      }

      response["services"] = servicesInfo;

      Json::Value requestHandlersInfo;
      index = 0;

      for(auto iter = m_requestHandlerMap.begin(), endIter = m_requestHandlerMap.end() ; endIter != iter ; ++iter)
      {
        const std::string &type(iter->second->getType());
        const std::string &name(iter->second->getName());

        Json::Value requestHandlerInfo;
        requestHandlerInfo["type"] = type;
        requestHandlerInfo["name"] = name;
        requestHandlersInfo[index] = requestHandlerInfo;

        ++index;
      }

      response["requestHandlers"] = requestHandlersInfo;
    }

  }

} 

