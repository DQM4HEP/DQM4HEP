/// \file DQMQualityTest.cc
/*
 *
 * DQMQualityTest.cc source template automatically generated by a class generator
 * Creation date : ven. fï¿½vr. 20 2015
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

// -- dqm4hep headers
#include "dqm4hep/QualityTest.h"
#include "dqm4hep/Logging.h"
#include "dqm4hep/XmlHelper.h"
#include "dqm4hep/MonitorElement.h"

namespace dqm4hep {

  namespace core {

    MeanWithinExpectedTest::MeanWithinExpectedTest(const std::string &name) :
	    QualityTest("MeanWithinExpected", name),
      m_expectedMean(0.f),
      m_meanDeviationLower(0.f),
      m_meanDeviationUpper(0.f)
    {
      /* nop */
    }

    //-------------------------------------------------------------------------------------------------

    MeanWithinExpectedTest::~MeanWithinExpectedTest()
    {
      /* nop */
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode MeanWithinExpectedTest::readSettings(const TiXmlHandle xmlHandle)
    {
      RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, XmlHelper::readValue(xmlHandle,
          "ExpectedMean", m_expectedMean));

      RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, XmlHelper::readValue(xmlHandle,
          "MeanDeviationLower", m_meanDeviationLower));

      RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, XmlHelper::readValue(xmlHandle,
          "MeanDeviationUpper", m_meanDeviationUpper));

      if(m_meanDeviationLower > m_expectedMean || m_meanDeviationUpper < m_expectedMean)
        return STATUS_CODE_INVALID_PARAMETER;

      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode MeanWithinExpectedTest::init()
    {
      /* nop */
      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode MeanWithinExpectedTest::run(MonitorElement *pMonitorElement, QualityTestReport &report)
    {
      TH1 *pHistogram = pMonitorElement->objectTo<TH1>();
      float mean = pHistogram->GetMean();

      if(m_meanDeviationLower < mean && mean < m_meanDeviationUpper)
      {
          
      }

        // test failed ?
        if(mean < m_xMin || mean > m_xMax)
        {
          m_quality = VERY_BAD_QUALITY;
          m_message = "Out of range !";
        }
        else
        {
          m_quality = VERY_GOOD_QUALITY;
          m_message = "";
        }

        m_isSuccessful = true;
      }
      else if(1 == m_strategy)
      {
        float chi = (pHistogram->GetMean() - m_expectedMean)/m_sigma;
        float probability = TMath::Prob(chi*chi, 1);

        m_quality = DQM4HEP::scaleToQuality(probability);
        m_isSuccessful = true;
      }
      else if(2 == m_strategy)
      {
        float chi = (pHistogram->GetMean() - m_expectedMean)/pHistogram->GetRMS();
        float probability = TMath::Prob(chi*chi, 1);

        m_quality = DQM4HEP::scaleToQuality(probability);
        m_isSuccessful = true;
      }
      else
      {
        m_isSuccessful = false;
        m_quality = NO_QUALITY;
        m_message = "Undefined strategy for this test";
      }

      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    bool MeanWithinExpectedTest::canRun(MonitorElement *pMonitorElement) const
    {
      if(nullptr == pMonitorElement)
        return false;

      TH1 *pHistogram = pMonitorElement->objectTo<TH1>();

      if(nullptr == pHistogram)
        return false;

      return true;
    }

  }

}
