/// \file DQMDBFileHandler.cc
/*
 *
 * DQMDBFileHandler.cc source template automatically generated by a class generator
 * Creation date : lun. janv. 11 2016
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "dqm4hep/DBFileHandler.h"
#include "dqm4hep/DBInterface.h"

#include <fstream>
#include <stdlib.h>

namespace dqm4hep {

  namespace core {

    DBFileHandler::DBFileHandler() :
		    m_type("db")
    {
      m_pDBInterface = new DBInterface();
    }

    //-------------------------------------------------------------------------------------------------

    DBFileHandler::~DBFileHandler()
    {
      delete m_pDBInterface;
    }

    //-------------------------------------------------------------------------------------------------

    const std::string &DBFileHandler::type() const
    {
      return m_type;
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode DBFileHandler::download(const std::string &pattern)
    {
      LOG4CXX_INFO( dqmMainLogger , "DBFileHandler: Performing download step ... " );

      m_localFileName = "";

      if(pattern.empty())
        return STATUS_CODE_INVALID_PARAMETER;

      // pattern is :
      // "HOST:hostname:USER:username:PWD=password:FILE=filename"
      size_t hostStart = pattern.find("HOST");
      size_t userStart = pattern.find("USER");
      size_t pwdStart = pattern.find("PWD");
      size_t fileStart = pattern.find("FILE");

      bool invalidPattern = hostStart != 0
          || hostStart == std::string::npos
          || userStart == std::string::npos
          || pwdStart == std::string::npos
          || fileStart == std::string::npos;

      if(!invalidPattern)
      {
        if(hostStart > userStart
            || userStart > pwdStart
            || pwdStart > fileStart)
          invalidPattern = true;
      }

      if(invalidPattern)
      {
        LOG4CXX_ERROR( dqmMainLogger , "DBFileHandler: Invalid pattern => " << pattern );
        LOG4CXX_ERROR( dqmMainLogger , "Expected pattern : 'HOST=hostname:USER=username:PWD=password:FILE=filename'" );

        return STATUS_CODE_INVALID_PARAMETER;
      }

      const std::string host = pattern.substr(5, userStart-1-5);
      const std::string user = pattern.substr(userStart+5, pwdStart-1-userStart-5);
      const std::string password = pattern.substr(pwdStart+4, fileStart-1-pwdStart-4);
      const std::string fileName = pattern.substr(fileStart+5);

      LOG4CXX_DEBUG( dqmMainLogger , "Host : " << host );
      LOG4CXX_DEBUG( dqmMainLogger , "User : " << user );
      LOG4CXX_DEBUG( dqmMainLogger , "Password : " << password );
      LOG4CXX_DEBUG( dqmMainLogger , "FileName : " << fileName );

      if(m_pDBInterface->isConnected())
        RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pDBInterface->disconnect());

      RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pDBInterface->connect(host, user, password, "DQM4HEP"));

      std::string fileContents;
      RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pDBInterface->queryConfigFileContent(fileName, fileContents));

      char templateFile[] = "/tmp/dqmdbfilehandler_XXXXXX.xml";
      int ret = mkstemps(templateFile, 4);

      if(ret < 0)
      {
        LOG4CXX_DEBUG( dqmMainLogger , "Counldn't create tmp file for db download !" );
        return STATUS_CODE_FAILURE;
      }

      m_localFileName = templateFile;

      std::ofstream file;
      file.open(m_localFileName.c_str(), std::ios::out);

      if(!file.is_open())
      {
        LOG4CXX_DEBUG( dqmMainLogger , "Counldn't open tmp file for db download !" );
        m_localFileName = "";

        return STATUS_CODE_FAILURE;
      }

      file << fileContents;
      file.close();

      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    const std::string &DBFileHandler::getLocalFileName() const
    {
      return m_localFileName;
    }

  }

} 

