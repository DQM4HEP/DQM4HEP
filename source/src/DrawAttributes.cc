  /// \file DrawAttributes.cc
/*
 *
 * DrawAttributes.cc source template automatically generated by a class generator
 * Creation date : lun. fï¿½vr. 6 2017
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "dqm4hep/DrawAttributes.h"

namespace dqm4hep {

  namespace core {

    LineAttributes::LineAttributes()
    {
      this->reset();
    }

    //-------------------------------------------------------------------------------------------------

    LineAttributes::LineAttributes(const LineAttributes &attributes) :
      m_lineColor(attributes.m_lineColor),
      m_lineWidth(attributes.m_lineWidth),
      m_lineStyle(attributes.m_lineStyle)
    {
      /* nop */
    }

    //-------------------------------------------------------------------------------------------------

    void LineAttributes::reset()
    {
      m_lineColor = Black;
      m_lineWidth = 1;
      m_lineStyle = SolidLine;
    }

    //-------------------------------------------------------------------------------------------------

    void LineAttributes::setLineWidth(int width)
    {
      m_lineWidth = width;
    }

    //-------------------------------------------------------------------------------------------------

    void LineAttributes::setLineColor(Color color)
    {
      m_lineColor = color;
    }

    //-------------------------------------------------------------------------------------------------

    void LineAttributes::setLineStyle(LineStyle style)
    {
      m_lineStyle = style;
    }

    //-------------------------------------------------------------------------------------------------

    void LineAttributes::setLineAttributes(int width, Color color, LineStyle style)
    {
      m_lineWidth = width; m_lineColor = color; m_lineStyle = style;
    }

    //-------------------------------------------------------------------------------------------------

    Color LineAttributes::getLineColor() const
    {
      return m_lineColor;
    }

    //-------------------------------------------------------------------------------------------------

    LineStyle LineAttributes::getLineStyle() const
    {
      return m_lineStyle;
    }

    //-------------------------------------------------------------------------------------------------

    int LineAttributes::getLineWidth() const
    {
      return m_lineWidth;
    }

    //-------------------------------------------------------------------------------------------------

    void LineAttributes::getLineAttributes(int &width, Color &color, LineStyle &style) const
    {
      width = m_lineWidth; color = m_lineColor; style = m_lineStyle;
    }

    //-------------------------------------------------------------------------------------------------

    void LineAttributes::toJson(Json::Value &value) const
    {
      value["width"] = m_lineWidth;
      value["color"] = static_cast<int>(m_lineColor);
      value["style"] = static_cast<int>(m_lineStyle);
    }

    //-------------------------------------------------------------------------------------------------

    void LineAttributes::fromJson(const Json::Value &value)
    {
      m_lineColor = static_cast<Color>(value.get("color", static_cast<int>(m_lineColor)).asInt());
      m_lineStyle = static_cast<LineStyle>(value.get("style", static_cast<int>(m_lineStyle)).asInt());
      m_lineWidth = value.get("width", m_lineWidth).asInt();
    }

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    MarkerAttributes::MarkerAttributes()
    {
      this->reset();
    }

    //-------------------------------------------------------------------------------------------------

    MarkerAttributes::MarkerAttributes(const MarkerAttributes &attributes) :
      m_markerColor(attributes.m_markerColor),
      m_markerSize(attributes.m_markerSize),
      m_markerStyle(attributes.m_markerStyle)
    {
      /* nop */
    }

    //-------------------------------------------------------------------------------------------------

    void MarkerAttributes::reset()
    {
      m_markerColor = Black;
      m_markerSize = 1;
      m_markerStyle = Point;
    }

    //-------------------------------------------------------------------------------------------------

    void MarkerAttributes::setMarkerSize(int size)
    {
      m_markerSize = size;
    }

    //-------------------------------------------------------------------------------------------------

    void MarkerAttributes::setMarkerColor(Color color)
    {
      m_markerColor = color;
    }

    //-------------------------------------------------------------------------------------------------

    void MarkerAttributes::setMarkerStyle(MarkerStyle style)
    {
      m_markerStyle = style;
    }

    //-------------------------------------------------------------------------------------------------

    void MarkerAttributes::setMarkerAttributes(int size, Color color, MarkerStyle style)
    {
      m_markerSize = size; m_markerColor = color; m_markerStyle = style;
    }

    //-------------------------------------------------------------------------------------------------

    Color MarkerAttributes::getMarkerColor() const
    {
      return m_markerColor;
    }

    //-------------------------------------------------------------------------------------------------

    MarkerStyle MarkerAttributes::getMarkerStyle() const
    {
      return m_markerStyle;
    }

    //-------------------------------------------------------------------------------------------------

    int MarkerAttributes::getMarkerSize() const
    {
      return m_markerSize;
    }

    //-------------------------------------------------------------------------------------------------

    void MarkerAttributes::getMarkerAttributes(int &size, Color &color, MarkerStyle &style) const
    {
      size = m_markerSize; color = m_markerColor; style = m_markerStyle;
    }

    //-------------------------------------------------------------------------------------------------

    void MarkerAttributes::toJson(Json::Value &value) const
    {
      value["size"] = m_markerSize;
      value["color"] = static_cast<int>(m_markerColor);
      value["style"] = static_cast<int>(m_markerStyle);
    }

    //-------------------------------------------------------------------------------------------------

    void MarkerAttributes::fromJson(const Json::Value &value)
    {
      m_markerColor = static_cast<Color>(value.get("color", static_cast<int>(m_markerColor)).asInt());
      m_markerStyle = static_cast<MarkerStyle>(value.get("style", static_cast<int>(m_markerStyle)).asInt());
      m_markerSize = value.get("size", m_markerSize).asInt();
    }

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    FillAttributes::FillAttributes()
    {
      this->reset();
    }

    //-------------------------------------------------------------------------------------------------

    FillAttributes::FillAttributes(const FillAttributes &attributes) :
      m_fillColor(attributes.m_fillColor),
      m_fillStyle(attributes.m_fillStyle)
    {
      /* nop */
    }

    //-------------------------------------------------------------------------------------------------

    void FillAttributes::reset()
    {
      m_fillColor = Black;
      m_fillStyle = Transparent;
    }

    //-------------------------------------------------------------------------------------------------

    void FillAttributes::setFillColor(Color color)
    {
      m_fillColor = color;
    }

    //-------------------------------------------------------------------------------------------------

    void FillAttributes::setFillStyle(FillStyle style)
    {
      m_fillStyle = style;
    }

    //-------------------------------------------------------------------------------------------------

    void FillAttributes::setFillAttributes(Color color, FillStyle style)
    {
      m_fillColor = color; m_fillStyle = style;
    }

    //-------------------------------------------------------------------------------------------------

    Color FillAttributes::getFillColor() const
    {
      return m_fillColor;
    }

    //-------------------------------------------------------------------------------------------------

    FillStyle FillAttributes::getFillStyle() const
    {
      return m_fillStyle;
    }

    //-------------------------------------------------------------------------------------------------

    void FillAttributes::getFillAttributes(Color &color, FillStyle &style) const
    {
      color = m_fillColor; style = m_fillStyle;
    }

    //-------------------------------------------------------------------------------------------------

    void FillAttributes::toJson(Json::Value &value) const
    {
      value["color"] = static_cast<int>(m_fillColor);
      value["style"] = static_cast<int>(m_fillStyle);
    }

    //-------------------------------------------------------------------------------------------------

    void FillAttributes::fromJson(const Json::Value &value)
    {
      m_fillColor = static_cast<Color>(value.get("color", static_cast<int>(m_fillColor)).asInt());
      m_fillStyle = static_cast<FillStyle>(value.get("style", static_cast<int>(m_fillStyle)).asInt());
    }

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    AxisAttributes::AxisAttributes()
    {
      this->reset();
    }

    //-------------------------------------------------------------------------------------------------

    void AxisAttributes::reset()
    {
      m_title.clear();
      m_titleSize = 0.04;
      m_titleColor = Black;
      m_labelSize = 0.04;
      m_labelColor = Black;
    }

    //-------------------------------------------------------------------------------------------------

    void AxisAttributes::setTitle(const std::string &title)
    {
      m_title = title;
    }

    //-------------------------------------------------------------------------------------------------

    void AxisAttributes::setTitleSize(float size)
    {
      m_titleSize = size;
    }

    //-------------------------------------------------------------------------------------------------

    void AxisAttributes::setTitleColor(Color color)
    {
      m_titleColor = color;
    }

    //-------------------------------------------------------------------------------------------------

    void AxisAttributes::setLabelSize(float size)
    {
      m_labelSize = size;
    }

    //-------------------------------------------------------------------------------------------------

    void AxisAttributes::setLabelColor(Color color)
    {
      m_labelColor = color;
    }

    //-------------------------------------------------------------------------------------------------

    const std::string &AxisAttributes::getTitle() const
    {
      return m_title;
    }

    //-------------------------------------------------------------------------------------------------

    float AxisAttributes::getTitleSize() const
    {
      return m_titleSize;
    }

    //-------------------------------------------------------------------------------------------------

    Color AxisAttributes::getTitleColor() const
    {
      return m_titleColor;
    }

    //-------------------------------------------------------------------------------------------------

    float AxisAttributes::getLabelSize() const
    {
      return m_labelSize;
    }

    //-------------------------------------------------------------------------------------------------

    Color AxisAttributes::getLabelColor() const
    {
      return m_labelColor;
    }

    //-------------------------------------------------------------------------------------------------

    void AxisAttributes::toJson(Json::Value &value) const
    {
      value["title"] = m_title;
      value["titleSize"] = m_titleSize;
      value["titleColor"] = static_cast<int>(m_titleColor);
      value["labelSize"] = m_labelSize;
      value["labelColor"] = static_cast<int>(m_labelColor);
    }

    //-------------------------------------------------------------------------------------------------

    void AxisAttributes::fromJson(const Json::Value &value)
    {
      m_title = value.get("title", m_title).asString();
      m_titleSize = value.get("titleSize", m_titleSize).asInt();
      m_titleColor = static_cast<Color>(value.get("titleColor", static_cast<int>(m_titleColor)).asInt());
      m_labelSize = value.get("labelSize", m_labelSize).asInt();
      m_labelColor = static_cast<Color>(value.get("labelColor", static_cast<int>(m_labelColor)).asInt());
    }

  }

}
