  /// \file PieChart.cc
/*
 *
 * PieChart.cc source template automatically generated by a class generator
 * Creation date : jeu. fï¿½vr. 2 2017
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "dqm4hep/PieChart.h"

namespace dqm4hep {

  namespace core {

    PieChart::PieChart() :
      MonitorObject(),
      m_drawLegend(true)
    {
      /* nop */
    }

    PieChart::~PieChart()
    {
      this->clear();
    }


    void PieChart::setTitle(const std::string &title)
    {
      m_title = title;
    }

    const std::string &PieChart::getTitle() const
    {
      return m_title;
    }

    void PieChart::setDrawLegend(bool draw)
    {
      m_drawLegend = draw;
    }

    bool PieChart::shouldDrawLegend() const
    {
      return m_drawLegend;
    }

    void PieChart::addEntry(const std::string &name, Color color, const float &value)
    {
      auto findIter = m_entries.find(name);

      if(findIter != m_entries.end())
        return;

      EntryMetadata metadata;
      metadata.m_color = color;
      metadata.m_value = value;
      metadata.m_percentage = 0.f;

      m_entries[name] = metadata;

      this->normalize();
    }


    void PieChart::setEntryColor(const std::string &name, Color color)
    {
      auto findIter = m_entries.find(name);

      if(findIter != m_entries.end())
        return;

      findIter->second.m_color = color;
    }


    void PieChart::setEntryValue(const std::string &name, const float &value)
    {
      auto findIter = m_entries.find(name);

      if(findIter != m_entries.end())
        return;

      findIter->second.m_value = value;
      this->normalize();
    }


    void PieChart::removeEntry(const std::string &name)
    {
      auto findIter = m_entries.find(name);

      if(findIter != m_entries.end())
        return;

      m_entries.erase(findIter);
      this->normalize();
    }


    void PieChart::clear()
    {
      m_entries.clear();
    }


    void PieChart::normalize()
    {
      float sum(0.f);

      for(auto iter = m_entries.begin(), endIter = m_entries.end() ; endIter != iter ; ++iter)
        sum += iter->second.m_value;

      for(auto iter = m_entries.begin(), endIter = m_entries.end() ; endIter != iter ; ++iter)
        iter->second.m_percentage = (iter->second.m_value*sum)/100.f;
    }

  }

}
