/// \file DQMQualityTest.h
/*
 *
 * DQMQualityTest.h header template automatically generated by a class generator
 * Creation date : ven. fï¿½vr. 20 2015
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQM4HEP_QUALITYTEST_H
#define DQM4HEP_QUALITYTEST_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"

// -- xdrstream headers
#include "xdrstream/xdrstream.h"

#include <json/json.h>

namespace dqm4hep {

  namespace core {

    class TiXmlHandle;

    namespace experimental {

      class MonitorElement;

      /** QualityTestResult class
       *  Hanlde the result of a quality test
       */
      class QualityTestResult
      {
      public:
        /** Constructor
         */
        QualityTestResult();

        /** Copy constructor
         */
        QualityTestResult(const QualityTestResult &qualityTestResult);

        /** Assignment operator
         */
        QualityTestResult &operator=(const QualityTestResult &qualityTestResult);

        /**
         * [toJson description]
         * @param value [description]
         */
        void toJson(Json::Value &value) const;

        /**
         * [fromJson description]
         * @param value [description]
         */
        void fromJson(const Json::Value &value);

      public:
        std::string           m_name;
        std::string           m_type;
        std::string           m_message;
        Quality               m_quality;
        bool                  m_isSuccessful;
      };


      /** QualityTest class
       */
      class QualityTest
      {
      public:
        /** Constructor with quality test name (unique identifier)
         */
        QualityTest(const std::string &name);

        /** Destructor
         */
        virtual ~QualityTest();

        /** Get the quality test type
         */
        const std::string &getType() const;

        /** Get the quality test name (unique identifier)
         */
        const std::string &getName() const;

        /** Get the message after quality test
         */
        const std::string &getMessage() const;

        /** Get the quality flag
         */
        Quality getQuality() const;

        /** Whether the quality test is successful
         */
        bool isSuccessful() const;

      protected:
        /** Read the settings from the xml handle
         */
        virtual StatusCode readSettings(const dqm4hep::core::TiXmlHandle xmlHandle) = 0;

        /** Initialize the quality test.
         */
        virtual StatusCode init() = 0;

        /** Runs a quality test on the given monitor element
         */
        virtual StatusCode run(MonitorElement *pMonitorElement) = 0;

        /** Whether the quality test can be run on the monitor element
         */
        virtual bool canRun(MonitorElement *pMonitorElement) const = 0;

      private:
        /** Perform the quality test result and fill the quality test result object
         */
        StatusCode run(MonitorElement *pMonitorElement, QualityTestResult &result);

      protected:
        std::string           m_message;
        bool                  m_isSuccessful;
        Quality               m_quality;

      private:
        std::string           m_type;
        std::string           m_name;

        // friendship
        friend class MonitorElementManager; // to create quality test
        friend class MonitorElement;     // to run quality test
      };

    }

    class MonitorElement;
    class TiXmlHandle;

    //-------------------------------------------------------------------------------------------------

    /** QualityTestResult class
     *  Hanlde the result of a quality test
     */
    class QualityTestResult : public xdrstream::Streamable
    {
    public:
      /** Constructor
       */
      QualityTestResult();

      /** Copy constructor
       */
      QualityTestResult(const QualityTestResult &qualityTestResult);

      /** Assignment operator
       */
      QualityTestResult &operator=(const QualityTestResult &qualityTestResult);

      xdrstream::Status stream(xdrstream::StreamingMode mode, xdrstream::IODevice *pDevice,
          xdrstream::xdr_version_t version = 0);

    public:
      std::string           m_qualityTestName;
      std::string           m_qualityTestType;
      std::string           m_message;
      Quality               m_quality;
      bool                  m_isSuccessful;
    };

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    /** QualityTest class
     */
    class QualityTest
    {
    public:

      /** Constructor with quality test name (unique identifier)
       */
      QualityTest(const std::string &name);

      /** Destructor
       */
      virtual ~QualityTest();

      /** Get the quality test type
       */
      const std::string &getType() const;

      /** Get the quality test name (unique identifier)
       */
      const std::string &getName() const;

      /** Get the message after quality test
       */
      const std::string &getMessage() const;

      /** Get the quality flag
       */
      Quality getQuality() const;

      /** Whether the quality test is successful
       */
      bool isSuccessful() const;

    protected:

      /** Read the settings from the xml handle
       */
      virtual StatusCode readSettings(const TiXmlHandle xmlHandle) = 0;

      /** Initialize the quality test.
       */
      virtual StatusCode init() = 0;

      /** Runs a quality test on the given monitor element
       */
      virtual StatusCode run(MonitorElement *pMonitorElement) = 0;

      /** Whether the quality test can be run on the monitor element
       */
      virtual bool canRun(MonitorElement *pMonitorElement) const = 0;

    private:

      /** Perform the quality test result and fill the quality test result object
       */
      StatusCode run(MonitorElement *pMonitorElement, QualityTestResult &result);

    protected:

      std::string           m_message;
      bool                 m_isSuccessful;
      Quality            m_quality;

    private:

      std::string    m_type;
      std::string    m_name;

      // friendship
      friend class MonitorElementManager; // to create quality test
      friend class MonitorElement;     // to run quality test
    };

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    /** QualityTestFactory class
     */
    class QualityTestFactory
    {
    public:
      /** Destructor
       */
      virtual ~QualityTestFactory();

      /** Create a quality test
       */
      virtual QualityTest *createQualityTest(const std::string &name) const = 0;
    };

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    inline QualityTestFactory::~QualityTestFactory()
    {
      /* nop */
    }

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    ///////////////////////////
    // BUILTIN QUALITY TESTS //
    ///////////////////////////

    /** MeanWithinExpectedTest class
     */
    class MeanWithinExpectedTest : public QualityTest
    {
    public:
      /** Factory class
       */
      class Factory : public QualityTestFactory
      {
      public:
        /** Create a quality test
         */
        QualityTest *createQualityTest(const std::string &name) const;
      };

      /** Constructor with name
       */
      MeanWithinExpectedTest(const std::string &name);

      /** Destructor
       */
      virtual ~MeanWithinExpectedTest();

      /** Read the settings from the xml handle
       */
      virtual StatusCode readSettings(const TiXmlHandle xmlHandle);

      /** Initialize the quality test.
       */
      virtual StatusCode init();

      /** Runs a quality test on the given monitor element
       */
      virtual StatusCode run(MonitorElement *pMonitorElement);

      /** Whether the quality test can be run on the monitor element
       */
      virtual bool canRun(MonitorElement *pMonitorElement) const;

      protected:

      unsigned int       m_strategy;
      float               m_xMin;
      float               m_xMax;
      float               m_expectedMean;
      float               m_sigma;
    };

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    inline QualityTest *MeanWithinExpectedTest::Factory::createQualityTest(const std::string &name) const
    {
      return new MeanWithinExpectedTest(name);
    }

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    /** Chi2FitFunctionTest class
     */
    class Chi2FitFunctionTest : public QualityTest
    {
    public:
      /** Factory class
       */
      class Factory : public QualityTestFactory
      {
      public:
        /** Create a quality test
         */
        QualityTest *createQualityTest(const std::string &name) const;
      };

      /** Constructor with name
       */
      Chi2FitFunctionTest(const std::string &name);

      /** Destructor
       */
      virtual ~Chi2FitFunctionTest();

      /** Read the settings from the xml handle
       */
      virtual StatusCode readSettings(const TiXmlHandle xmlHandle);

      /** Initialize the quality test.
       */
      virtual StatusCode init();

      /** Runs a quality test on the given monitor element
       */
      virtual StatusCode run(MonitorElement *pMonitorElement);

      /** Whether the quality test can be run on the monitor element
       */
      virtual bool canRun(MonitorElement *pMonitorElement) const;

      protected:

      std::string                m_formula;
      std::vector<double>        m_inputParameterList;
      unsigned int               m_functionNParameters;
      double                     m_functionXMin;
      double                     m_functionXMax;
    };

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    inline QualityTest *Chi2FitFunctionTest::Factory::createQualityTest(const std::string &name) const
    {
      return new Chi2FitFunctionTest(name);
    }

  }

}

#endif  //  DQM4HEP_QUALITYTEST_H
