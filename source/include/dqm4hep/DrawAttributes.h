  /// \file DrawAttributes.h
/*
 *
 * DrawAttributes.h header template automatically generated by a class generator
 * Creation date : lun. fï¿½vr. 6 2017
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DRAWATTRIBUTES_H
#define DRAWATTRIBUTES_H

#include "dqm4hep/DQM4HEP.h"
#include "json/json.h"

namespace dqm4hep {

  namespace core {

    /**
     * Color enum.
     * Same color enum as ROOT
     */
    enum Color
    {
      White   = 0,
      Black   = 1,
      Gray    = 920,
      Red     = 632,
      Green   = 416,
      Blue    = 600,
      Yellow  = 400,
      Magenta = 616,
      Cyan    = 432,
      Orange  = 800,
      Spring  = 820,
      Teal    = 840,
      Azure   = 860,
      Violet  = 880,
      Pink    = 900
    };

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    /**
     * MarkerStyle enum
     * Same marker style enum as ROOT
     */
    enum MarkerStyle
    {
      Point = 7,
      FullCircle = 20,
      FullSquare = 21,
      FullTriangle = 22,
      FullDiamond = 33,
      FullCross = 34,
      FullStar = 29,
      Circle = 24,
      Square = 25,
      Triangle = 26,
      Diamond = 27,
      Cross = 28,
      Star = 30
    };

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    /**
     * LineStyle enum
     */
    enum LineStyle
    {
      SolidLine,                  ///< solid line
      DashLine,                   ///< dash line
      DotLine,                    ///< dot line
      DashDotLine,                ///< alternate dashes and dots
      DashDotDotLine              ///< alternate dashes and double dots
    };

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    /**
     * FillStyle enum
     */
    enum FillStyle
    {
      Transparent = 0,
      Solid
    };

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    /**
     * LineAttributes class
     */
    class LineAttributes
    {
    public:
      /**
       * Constructor
       */
      LineAttributes();

      /**
       * Copy constructor
       */
      LineAttributes(const LineAttributes &attributes);

      /**
       * [reset description]
       */
      void reset();

      /**
       * [setLineWidth description]
       * @param width [description]
       */
      void setLineWidth(int width);

      /**
       * [setLineColor description]
       * @param color [description]
       */
      void setLineColor(Color color);

      /**
       * [setLineStyle description]
       * @param style [description]
       */
      void setLineStyle(LineStyle style);

      /**
       * [setLineAttributes description]
       * @param width [description]
       * @param color [description]
       * @param style [description]
       */
      void setLineAttributes(int width, Color color, LineStyle style);

      /**
       * [getLineColor description]
       * @return [description]
       */
      Color getLineColor() const;

      /**
       * [getLineStyle description]
       * @return [description]
       */
      LineStyle getLineStyle() const;

      /**
       * [getLineWidth description]
       * @return [description]
       */
      int getLineWidth() const;

      /**
       * [getLineAttributes description]
       * @param width [description]
       * @param color [description]
       * @param style [description]
       */
      void getLineAttributes(int &width, Color &color, LineStyle &style) const;

      /**
       * [toJson description]
       * @param value [description]
       */
      void toJson(Json::Value &value) const;

      /**
       * [fromJson description]
       * @param value [description]
       */
      void fromJson(const Json::Value &value);

    private:
      Color                       m_lineColor;        ///< The line color
      int                         m_lineWidth;        ///< The line width
      LineStyle                   m_lineStyle;        ///< The line style
    };

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    /**
     * MarkerAttributes class
     */
    class MarkerAttributes
    {
    public:
      /**
       * Constructor
       */
      MarkerAttributes();

      /**
       * Copy constructor
       */
      MarkerAttributes(const MarkerAttributes &attributes);

      /**
       * [reset description]
       */
      void reset();

      /**
       * [setMarkerSize description]
       * @param size [description]
       */
      void setMarkerSize(int size);

      /**
       * [setMarkerColor description]
       * @param color [description]
       */
      void setMarkerColor(Color color);

      /**
       * [setMarkerColor description]
       * @param style [description]
       */
      void setMarkerStyle(MarkerStyle style);

      /**
       * [setMarkerAttributes description]
       * @param size  [description]
       * @param color [description]
       * @param style [description]
       */
      void setMarkerAttributes(int size, Color color, MarkerStyle style);

      /**
       * [getMarkerColor description]
       * @return [description]
       */
      Color getMarkerColor() const;

      /**
       * [getMarkerStyle description]
       * @return [description]
       */
      MarkerStyle getMarkerStyle() const;

      /**
       * [getMarkerSize description]
       * @return [description]
       */
      int getMarkerSize() const;

      /**
       * [getMarkerAttributes description]
       * @param size  [description]
       * @param color [description]
       * @param style [description]
       */
      void getMarkerAttributes(int &size, Color &color, MarkerStyle &style) const;

      /**
       * [toJson description]
       * @param value [description]
       */
      void toJson(Json::Value &value) const;

      /**
       * [fromJson description]
       * @param value [description]
       */
      void fromJson(const Json::Value &value);

    private:
      Color                       m_markerColor;        ///< The marker color
      int                         m_markerSize;         ///< The marker size
      MarkerStyle                 m_markerStyle;        ///< The marker style
    };

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    /**
     * FillAttributes class
     */
    class FillAttributes
    {
    public:
      /**
       * Constructor
       */
      FillAttributes();

      /**
       * Copy constructor
       */
      FillAttributes(const FillAttributes &attributes);

      /**
       * [reset description]
       */
      void reset();

      /**
       * [setFillColor description]
       * @param color [description]
       */
      void setFillColor(Color color);

      /**
       * [setFillStyle description]
       * @param style [description]
       */
      void setFillStyle(FillStyle style);

      /**
       * [setFillAttributes description]
       * @param color [description]
       * @param style [description]
       */
      void setFillAttributes(Color color, FillStyle style);

      /**
       * [getFillColor description]
       * @return [description]
       */
      Color getFillColor() const;

      /**
       * [getFillStyle description]
       * @return [description]
       */
      FillStyle getFillStyle() const;

      /**
       * [getFillAttributes description]
       * @param color [description]
       * @param style [description]
       */
      void getFillAttributes(Color &color, FillStyle &style) const;

      /**
       * [toJson description]
       * @param value [description]
       */
      void toJson(Json::Value &value) const;

      /**
       * [fromJson description]
       * @param value [description]
       */
      void fromJson(const Json::Value &value);

    private:
      Color                       m_fillColor;          ///< The fill color
      FillStyle                   m_fillStyle;          ///< The fill style
    };

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    /**
     * AxisAttributes class
     */
    class AxisAttributes
    {
    public:
      /**
       * Constructor
       */
      AxisAttributes();

      /**
       * [reset description]
       */
      void reset();

      /**
       * [setTitle description]
       * @param title [description]
       */
      void setTitle(const std::string &title);

      /**
       * [setTitleSize description]
       * @param size [description]
       */
      void setTitleSize(float size);

      /**
       * [setTitleColor description]
       * @param color [description]
       */
      void setTitleColor(Color color);

      /**
       * [setLabelSize description]
       * @param size [description]
       */
      void setLabelSize(float size);

      /**
       * [setLabelColor description]
       * @param color [description]
       */
      void setLabelColor(Color color);

      /**
       * [getTitle description]
       * @return [description]
       */
      const std::string &getTitle() const;

      /**
       * [getTitleSize description]
       * @return [description]
       */
      float getTitleSize() const;

      /**
       * [getTitleColor description]
       * @return [description]
       */
      Color getTitleColor() const;

      /**
       * [getLabelSize description]
       * @return [description]
       */
      float getLabelSize() const;

      /**
       * [getLabelColor description]
       * @return [description]
       */
      Color getLabelColor() const;

      /**
       * [toJson description]
       * @param value [description]
       */
      void toJson(Json::Value &value) const;

      /**
       * [fromJson description]
       * @param value [description]
       */
      void fromJson(const Json::Value &value);

    public:
      std::string               m_title;           ///< The axis title
      float                     m_titleSize;       ///< The axis title size
      Color                     m_titleColor;      ///< The title color
      float                     m_labelSize;       ///< The label size
      Color                     m_labelColor;      ///< The label color
    };

  }

}

#endif  //  DRAWATTRIBUTES_H
