/*
 *
 * DQMStatisticsClient.h header template automatically generated by a class generator
 * Creation date : lun. dï¿½c. 14 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQM4HEP_STATISTICSCLIENT_H
#define DQM4HEP_STATISTICSCLIENT_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"

// -- dim headers
#include "dic.hxx"

// -- pthread headers
#include <pthread.h>

namespace dqm4hep {

  namespace core {

    /** StatisticsClient class
     */
    class StatisticsClient : public DimClient
    {
    public:
      /** Constructor
       */
      StatisticsClient(const std::string &baseServiceName);

      /** Destructor
       */
      ~StatisticsClient();

      /** Get the last update time
       */
      int getLastUpdateTime() const;

      /** Get the service rate
       */
      float getRate() const;

      /** Get the mean statistics recorded by the service
       */
      float getMeanStats() const;

      /** Get the last statistics received by the service
       */
      float getLastStats() const;

      /** Call back method called when one of the services is updated
       */
      virtual void updated();

    private:
      /** Dim call back methods when data are received.
       *  WARNING : this method is called in a different thread
       */
      void infoHandler();

    private:
      int                       m_lastStatsTimestamp;
      float                     m_rate;
      float                     m_meanStats;
      int                       m_lastStatistics;

      DimUpdatedInfo            *m_pLastUpdateTimeInfo;
      DimUpdatedInfo            *m_pRateInfo;
      DimUpdatedInfo            *m_pMeanStatsInfo;
      DimUpdatedInfo            *m_pLastUpdateStatisticsInfo;

      mutable pthread_mutex_t   m_mutex;
    };

  }

} 

#endif  //  DQM4HEP_STATISTICSCLIENT_H
