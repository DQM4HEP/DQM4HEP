/// \file DQMDimEventClient.h
/*
 *
 * DQMDimEventClient.h header template automatically generated by a class generator
 * Creation date : mar. sept. 8 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQM4HEP_DIMEVENTCLIENT_H
#define DQM4HEP_DIMEVENTCLIENT_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"
#include "dqm4hep/Event.h"
#include "dqm4hep/EventClient.h"
#include "dqm4hep/Streamer.h"

// -- xdrstream headers
#include "xdrstream/xdrstream.h"

// -- dim headers
#include "dic.hxx"

namespace dqm4hep {

  namespace core {

    class DimEventClient;

    /** DimEventRpcInfo class
     */
    class DimEventRpcInfo : public DimRpcInfo
    {
      friend class DimEventClient;

    private:
      /** Constructor
       */
      DimEventRpcInfo(DimEventClient *pEventClient);

      /** Dim handler of rpc info
       */
      void rpcInfoHandler();

      DimEventClient *m_pEventClient;
    };

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    /** DimEventClient class
     */
    class DimEventClient : public EventClient, public DimClient
    {
      friend class DimEventRpcInfo;

    public:
      /** Constructor
       */
      DimEventClient();

      /** Destructor
       */
      ~DimEventClient();

      /** Workhorse of the service connection
       */
      StatusCode performServiceConnection();

      /** Workhorse of the service connection
       */
      StatusCode performServiceDisconnection();

      /** Whether the client is connected to the collector (server)
       */
      bool isConnectedToService() const;

      /** Send an event to the collector (server).
       *  Possible only if a connection has been created (connectToService())
       *  and an event streamer set.
       */
      StatusCode sendEvent(const Event *pEvent);

      /** Query an event to the collector (server) with a timeout
       *  and handle it without pushing it into the internal queue
       */
      StatusCode queryEvent(Event *&pEvent, int timeout);

      /** Query an event to the collector.
       *
       *  A command is send to the collector in order to send back an event.
       *  This method does not wait for the event reception.
       *
       *  To query a single event that is directly handled by the caller,
       *  use queryEvent(evt, timeout).
       *
       *  The received event is pushed in an internal event queue.
       */
      StatusCode queryEvent();

      /** Set the update mode.
       *  If the update mode is set to true, a command
       *  is sent to the server in order to update the client
       *  as soon as an event is received in the collector server.
       */
      void setUpdateMode(bool updateMode);

      /** Whether the update mode is set
       */
      bool getUpdateMode() const;

    private:
      /** Dim info handler
       */
      void infoHandler();

      /** Handle the event reception as a buffer an its buffer size
       */
      StatusCode eventReception(dqm_char *pBuffer, dqm_uint bufferSize);

      /** Set the sub event identifier.
       *  This string is sent while querying events.
       *  The received event will be a sub event matching this identifier
       *
       *  The event sub identifier is sent the the collector is the
       *  client is connected to the service
       */
      void setSubEventIdentifier(const std::string &identifier);

      /** Read settings from the xml handle
       */
      StatusCode readSettings(const TiXmlHandle &xmlHandle);

    private:
      bool                         m_isConnected;
      DimEventRpcInfo              *m_pDimEventRpcInfo;
      DimUpdatedInfo               *m_pClientIdInfo;       ///< to receive the client id stored on server
      DimUpdatedInfo               *m_pServerStateInfo;   ///< Server state. 0 for stopped : 1 for running
      DimUpdatedInfo               *m_pEventUpdateInfo;   ///< For event reception

      int                           m_serverClientId;
      bool                          m_updateMode;

      xdrstream::BufferDevice      *m_pWriteBuffer;
      xdrstream::BufferDevice      *m_pReadBuffer;
      mutable pthread_mutex_t       m_mutex;  // prevent data race during de/serialization
    };

  }

} 

#endif  //  DQM4HEP_DIMEVENTCLIENT_H
