/// \file DQMRunControlService.h
/*
 *
 * DQMRunControlService.h header template automatically generated by a class generator
 * Creation date : mer. nov. 12 2014
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQM4HEP_RUNCONTROLSERVICE_H
#define DQM4HEP_RUNCONTROLSERVICE_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"

// -- xdrstream headers
#include "xdrstream/xdrstream.h"

// -- dim headers
#include "dis.hxx"

#ifdef DQM4HEP_USE_MONGOOSE
#include <mongoose/WebController.h>

using namespace Mongoose;
#endif

namespace dqm4hep {

  namespace core {

    class RunControl;
    class RunControlService;
    class Run;

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    /** CurrentRunRpc class
     */
    class CurrentRunRpc : public DimRpc
    {
    public:
      /** Constructor
       */
      CurrentRunRpc(char *rpcName, RunControlService *pService);

    private:
      /** Dim rpc handler
       */
      void rpcHandler();

    private:
      RunControlService         *m_pService;
    };

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    /** StartNewRunRpc class
     */
    class StartNewRunRpc : public DimRpc
    {
    public:
      /** Constructor
       */
      StartNewRunRpc(char *rpcName, RunControlService *pService);

    private:
      /** Dim rpc handler
       */
      void rpcHandler();

    private:
      RunControlService         *m_pService;
    };

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    /** EndCurrentRunRpc class
     */
    class EndCurrentRunRpc : public DimRpc
    {
    public:
      /** Constructor
       */
      EndCurrentRunRpc(char *rpcName, RunControlService *pService);

    private:
      /** Dim rpc handler
       */
      void rpcHandler();

    private:
      RunControlService         *m_pService;
    };

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    /** RunControlService class
     */
    class RunControlService
#ifdef DQM4HEP_USE_MONGOOSE
        : public Mongoose::WebController
#endif
          {
          public:
      /** Constructor
       */
      RunControlService();

      /** Destructor
       */
      ~RunControlService();

      /** Start the service.
       */
      StatusCode start();

      /** Stop the service.
       *  Remove all connections and clean up the service.
       *  Use pause to stop the service temporarily.
       */
      StatusCode stop();

      /** Pause the service until restart is called.
       */
      StatusCode pause();

      /** Restart the service.
       */
      StatusCode restart();

      /** Get the service state. See State enum (DQM4HEP.h)
       */
      State getState() const;

      /** Whether the service is running
       */
      bool isRunning() const;

      /** Set the run control name
       */
      StatusCode setRunControlName(const std::string &runControlName);

      /** Get the run control name
       */
      const std::string &getRunControlName() const;

      /** Create a new run.
       *  End the current run if there is one.
       */
      StatusCode startNewRun(unsigned int runNumber, const std::string &description = "", const std::string &detectorName = "", const std::string &password = "");

      /** Create a new run.
       *  End the current run if there is one.
       */
      StatusCode startNewRun(Run *pRun, const std::string &password = "");

      /** End the current run
       */
      StatusCode endCurrentRun( const std::string &password = "" );

      /** Get the current run number
       */
      int getCurrentRunNumber() const;

      /** Get the run state (running or not)
       */
      State getRunState() const;

      /** Get the current run.
       *  Return NULL if not running
       */
      Run *getCurrentRun() const;

      /** Set the password for this run control service.
       *  Used when a user wants to start a new run using the dedicated RPC
       */
      StatusCode setPassword( const std::string &password );


#ifdef DQM4HEP_USE_MONGOOSE
          public:
      /** Setup http routes
       */
      void setup();
          private:
      /// call back methods on http request
      void mongooseStartOfRunGetForm(Mongoose::Request &request, Mongoose::StreamResponse &response);
      void mongooseEndCurrentRunGetForm(Mongoose::Request &request, Mongoose::StreamResponse &response);
      void mongooseStartOfRun(Mongoose::Request &request, Mongoose::StreamResponse &response);
      void mongooseEndOfRun(Mongoose::Request &request, Mongoose::StreamResponse &response);
      void mongooseRunStatus(Mongoose::Request &request, Mongoose::StreamResponse &response);

      std::string configureRunStatusHtml(const Run *const pRun) const;
#endif

          private:
      /** Handle the received rpc to get the current run
       */
      void handleCurrentRunRpc(DimRpc *pRpc);

      /** Handle the received rpc to start a new run
       */
      void handleStartNewRunRpc(DimRpc *pRpc);

      /** Handle the received rpc to end the current run
       */
      void handleEndCurrentRunRpc(DimRpc *pRpc);

      /**
       */
      void configureInBuffer( char *pBuffer, xdrstream::xdr_size_t bufferSize );

          private:
      int                      m_currentRunNumber;
      State                    m_serviceState;
      RunControl              *m_pRunControl;

      DimService               *m_pStartOfRunService;
      DimService               *m_pEndOfRunService;
      DimRpc                   *m_pCurrentRunRpc;
      DimRpc                   *m_pStartNewRunRpc;
      DimRpc                   *m_pEndCurrentRunRpc;

      xdrstream::BufferDevice  *m_pInBuffer;
      xdrstream::BufferDevice  *m_pOutBuffer;

      friend class CurrentRunRpc;
      friend class StartNewRunRpc;
      friend class EndCurrentRunRpc;
    };

  }

} 

#endif  //  DQM4HEP_RUNCONTROLSERVICE_H
