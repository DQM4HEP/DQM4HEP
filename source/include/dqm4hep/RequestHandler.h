/// \file RequestHandler.h
/*
 *
 * RequestHandler.h header template automatically generated by a class generator
 * Creation date : sam. dï¿½c. 3 2016
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef REQUESTHANDLER_H
#define REQUESTHANDLER_H

#include <string>

#include "json/json.h"

#include "dis.hxx"

namespace dqm4hep {

  namespace net {

    class Server;

    /** RequestHandler class
     */
    class RequestHandler
    {
      friend class Server;
    public:
      /** Get the request type
       */
      const std::string &getType() const;

      /** Get the request name
       */
      const std::string &getName() const;

      /** Get the request full name, as it is allocated on the network
       */
      const std::string &getFullName() const;

      /** Get the server in which the request handler is declared
       */
      Server *getServer() const;

      /** Get the full request handle name from the request handler type and name
       */
      static std::string getFullRequestHandlerName(const std::string &type, const std::string &name);

    protected:
      /** Constructor
       */
      RequestHandler(Server *pServer, const std::string &type, const std::string &name);

      /** Destructor
       */
      virtual ~RequestHandler();

      /** Process the request and fill the response
       */
       virtual void processRequest(const Json::Value &request, Json::Value &response) = 0;

    private:
      /** Rpc class.
       *
       *  The concrete dim rpc implementation
       */
      class Rpc : public DimRpc
      {
      public:
        /** Contructor
         */
        Rpc(RequestHandler *pHandler);

        /** The dim rpc handler
         */
        void rpcHandler();

      private:
        RequestHandler        *m_pHandler;
      };

      /** Process the dim rpc request
       */
      void processRequest(Rpc *pRpc);

    private:
      std::string           m_type;             ///< The request handler type
      std::string           m_name;             ///< The request handler name
      std::string           m_fullName;         ///< The request handler full name
      Rpc                   m_rpc;              ///< The concrete dim rpc implementation
      Server               *m_pServer;          ///< The server in which the request handler is declared
    };

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    /** RequestHandler class
     */
    template <typename T>
    class RequestHandlerT : public RequestHandler
    {
      friend class Server;
    public:
      typedef void (T::*RequestFunction)(const Json::Value &request, Json::Value &response);

      /** Process the request and fill the response
       *  Forward the request processing to the controller
       */
      void processRequest(const Json::Value &request, Json::Value &response);

    private:
      /** Constructor with request type and name
       */
      RequestHandlerT(Server *pServer, const std::string &type, const std::string &name,
          T *controller, RequestFunction callback);

    private:
      T                    *m_pController;         ///< The request controller
      RequestFunction       m_function;            ///< The controller callback function
    };

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    template <typename T>
    inline RequestHandlerT<T>::RequestHandlerT(Server *pServer, const std::string &type, const std::string &name, T *pController, RequestFunction function) :
        RequestHandler(pServer, type, name),
        m_pController(pController),
        m_function(function)
    {
      /* nop */
    }

    //-------------------------------------------------------------------------------------------------

    template <typename T>
    inline void RequestHandlerT<T>::processRequest(const Json::Value &request, Json::Value &response)
    {
      (m_pController->*m_function)(request, response);
    }

  }

} 

#endif  //  REQUESTHANDLER_H
