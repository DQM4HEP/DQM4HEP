  /// \file LogCollector.h
/*
 *
 * LogCollector.h header template automatically generated by a class generator
 * Creation date : mar. mars 21 2017
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef LOGCOLLECTOR_H
#define LOGCOLLECTOR_H

// -- dqm4hep headers
#include <dqm4hep/Client.h>
#include <dqm4hep/Server.h>
#include <dqm4hep/Service.h>
#include <dqm4hep/Logger.h>
#include <dqm4hep/Logging.h>

namespace dqm4hep {

  namespace core {

    /**
     * LogCollector class
     */
    class LogCollector
    {
    public:
      /**
       * Constructor
       */
      LogCollector();

      /**
       * Destructor
       */
      ~LogCollector();

      /**
       * Set the maximum size of the log stack
       * @param maxSize the max size
       */
      void setMaxSize(size_t maxSize);

      /**
       * Set the period at the end of which the logs are cleared.
       * @param period the period in minutes
       */
      void setCleaningPeriod(unsigned int period);

      /**
       * Run the log collector server
       */
      void run();

      /**
       * [stop description]
       */
      void stop();

    private:
      void receiveLog(const std::string &contents);
      void handleLogsRequest(const std::string &request, std::string &response);
      void clearLogs();

    protected:
      size_t                      m_maxSize;
      unsigned int                m_cleaningPeriod;
      net::Server                *m_pServer;
      net::Service               *m_pLogService;
      volatile bool               m_exit;
      Logger::LoggerPtr           m_logger;
      std::vector<Json::Value>    m_logEntries;
      TimePoint                   m_lastCleanup;
    };

  }

}

#endif  //  LOGCOLLECTOR_H
