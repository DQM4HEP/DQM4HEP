  /// \file Scalar.h
/*
 *
 * Scalar.h header template automatically generated by a class generator
 * Creation date : jeu. fï¿½vr. 2 2017
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef SCALAR_H
#define SCALAR_H

#include "dqm4hep/DQM4HEP.h"
#include "dqm4hep/MonitorObject.h"

namespace dqm4hep {

  namespace core {

    /**
     * Scalar class
     */
    template <typename ScalarType>
    class Scalar final : public MonitorObject
    {
    public:
     /**
      * Constructor
      */
     Scalar();

     /**
      * Constructor
      */
     Scalar(const ScalarType &value);

     /**
      * Destructor
      */
     ~Scalar();

     /**
      *
      */
     static Scalar<T> *create(const Json::Value &value);

     /**
      * [setValue description]
      * @param value [description]
      */
     void setValue(const ScalarType &value);

     /**
      * [getValue description]
      * @return [description]
      */
     const ScalarType &getValue() const;

     /**
      * [toString description]
      * @return [description]
      */
     std::string toString() const;

   private:
     void fromJson(const Json::Value &value);
     void toJson(Json::Value &value, bool full = true);
     bool isUpToDate() const;

   private:
      bool                       m_updated;
      ScalarType                 m_value;
    };

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    template <typename ScalarType>
    inline Scalar<ScalarType>::Scalar() :
      m_updated(true),
      m_value(0)
    {
      /* nop */
    }

    //-------------------------------------------------------------------------------------------------

    template <typename ScalarType>
    inline Scalar<ScalarType>::Scalar(const ScalarType &value) :
      m_updated(true),
      m_value(value)
    {
      /* nop */
    }

    //-------------------------------------------------------------------------------------------------

    template <typename ScalarType>
    inline Scalar<ScalarType>::~Scalar()
    {
      /* nop */
    }

    //-------------------------------------------------------------------------------------------------

    template <typename ScalarType>
    inline Scalar<T> *Scalar<T>::create(const Json::Value &value)
    {
      Scalar<T> *pScalar = new Scalar<T>();
      pScalar->fromJson(value);

      return pScalar;
    }

    //-------------------------------------------------------------------------------------------------

    template <typename ScalarType>
    inline void Scalar<ScalarType>::setValue(const ScalarType &value)
    {
      m_updated = true;
      m_value = value;
    }

    //-------------------------------------------------------------------------------------------------

    template <typename ScalarType>
    inline const ScalarType &Scalar<ScalarType>::getValue() const
    {
      return m_value;
    }

    //-------------------------------------------------------------------------------------------------

    template <typename ScalarType>
    inline std::string Scalar<ScalarType>::toString() const
    {
      return std::move(DQM4HEP:::typeToString(m_value));
    }

    //-------------------------------------------------------------------------------------------------

    template <typename ScalarType>
    inline bool Scalar<ScalarType>::isUpToDate() const
    {
      return (!m_updated);
    }

    //-------------------------------------------------------------------------------------------------

    template <typename ScalarType>
    inline void Scalar<ScalarType>::fromJson(const Json::Value &value)
    {
      value["value"] = DQM4HEP::typeToString(m_value);
    }

    //-------------------------------------------------------------------------------------------------

    template <typename ScalarType>
    inline void Scalar<ScalarType>::toJson(Json::Value &value, bool /*full*/, bool /*resetCache*/)
    {
      DQM4HEP::stringToType(value.get("value", "").asString(), m_value);
    }

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    template <>
    inline Scalar<std::string>::Scalar() :
      m_update(true),
      m_value("")
    {
      /* nop */
    }
    
    //-------------------------------------------------------------------------------------------------

    template <>
    inline std::string Scalar<std::string>::toString() const
    {
      return m_value;
    }

  }

}

#endif  //  SCALAR_H
