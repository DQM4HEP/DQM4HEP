/// \file ServiceHandler.h
/*
 *
 * ServiceHandler.h header template automatically generated by a class generator
 * Creation date : dim. dï¿½c. 4 2016
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef SERVICEHANDLER_H
#define SERVICEHANDLER_H

#include "json/json.h"

#include "dic.hxx"

namespace dqm4hep {

  namespace net {

    class Client;

    /** ServiceHandler class
     */
    class ServiceHandler
    {
      friend class Client;
    public:
      /** Get the request type
       */
      const std::string &getType() const;

      /** Get the request name
       */
      const std::string &getName() const;

      /** Get the request full name, as it is allocated on the network
       */
      const std::string &getFullName() const;

      /** Get the client interface
       */
      Client *getClient() const;

    private:
      /** Constructor
       */
      ServiceHandler(Client *pClient, const std::string &type, const std::string &name);

      /** Destructor
       */
      virtual ~ServiceHandler();

      /**
       */
      virtual void serviceHandler(const Json::Value &serviceValue) = 0;

    private:
      /** ServiceInfo class.
       *
       *  The concrete dim updated info implementation
       */
      class ServiceInfo : public DimUpdatedInfo
      {
      public:
        /** Contructor
         */
        ServiceInfo(ServiceHandler *pHandler);

        /** The dim rpc handler
         */
        void infoHandler();

      private:
        ServiceHandler        *m_pHandler;
      };

      /** Process the dim rpc request
       */
      void processService(ServiceInfo *pInfo);

    private:
      std::string                    m_type;             ///< The request handler type
      std::string                    m_name;             ///< The request handler name
      std::string                    m_fullName;         ///< The request handler full name
      ServiceInfo                    m_serviceInfo;
      Client                        *m_pClient;
    };

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    /**
     */
    template <typename T>
    class ServiceHandlerT : public ServiceHandler
    {
      friend class Client;
    public:
      typedef void (T::*Function)(const Json::Value &serviceValue);

    private:
      /**
       */
      ServiceHandlerT(Client *pClient, const std::string &type, const std::string &name,
          T *pController, Function function);

      /**
       */
      void serviceHandler(const Json::Value &serviceValue);

    private:
      T            *m_pController;
      Function      m_function;
    };

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    template <typename T>
    inline ServiceHandlerT<T>::ServiceHandlerT(Client *pClient, const std::string &type, const std::string &name,
        T *pController, Function function) :
        ServiceHandler(pClient, type, name),
        m_pController(pController),
        m_function(function)
    {
      /* nop */
    }

    //-------------------------------------------------------------------------------------------------

    template <typename T>
    inline void ServiceHandlerT<T>::serviceHandler(const Json::Value &serviceValue)
    {
      (m_pController->*m_function)(serviceValue);
    }

  }

}

#endif  //  SERVICEHANDLER_H
