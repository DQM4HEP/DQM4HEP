/// \file DQMDirectory.h
/*
 *
 * DQMDirectory.h header template automatically generated by a class generator
 * Creation date : ven. fï¿½vr. 20 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQM4HEP_DIRECTORY_H
#define DQM4HEP_DIRECTORY_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"
#include "dqm4hep/DQMPath.h"

namespace dqm4hep {

  namespace core {

    /** Directory class.
     *
     *  A directory is the owner of its sub-directories.
     *  Monitor elements owning depends on how the method
     *  are called (default : not owner)
     *
     *  This interface doesn't allow moving sub-directories
     */
    class Directory
    {
    public:
      /** Default constructor
       */
      Directory();

      /** Constructor with name and parent dir
       */
      Directory(const std::string &name, Directory *pParentDir = NULL);

      /** Destructor.
       *  Delete the subdirectories but not the contents
       */
      ~Directory();

      /** Create a new directory
       */
      StatusCode mkdir(const std::string &dirName);

      /** List the directory contents and subdirs if asked
       */
      void ls(bool recursive = false) const;

      /** Returns the directory name
       */
      const std::string &getName() const;

      /** Returns the parent directory
       */
      Directory *getParentDir() const;

      /** Get the sub directory list
       */
      const std::vector<Directory*> &getSubDirList() const;

      /** Whether the directory contains the sub dir
       */
      bool containsDir(const std::string &dirName) const;

      /** Find the sub directory by name
       */
      StatusCode findDir(const std::string &dirName, Directory *&pDirectory) const;

      /** Add a monitor elements to the directory
       */
      StatusCode addMonitorElement(const MonitorElementPtr &monitorElement);

      /** Find a monitor element with a given name in the directory
       */
      StatusCode findMonitorElement(const std::string &name, MonitorElementPtr &monitorElement) const;

      /** Whether the directory contains the monitor element (search by ptr compare)
       */
      bool containsMonitorElement(const MonitorElementPtr &monitorElement) const;

      /** Whether the directory contains the monitor element (search by name compare)
       */
      bool containsMonitorElement(const std::string &monitorElementName) const;

      /** Remove the monitor element from the directory
       */
      StatusCode removeMonitorElement(const MonitorElementPtr &monitorElement);

      /** Remove the monitor element from the directory
       */
      StatusCode removeMonitorElement(const std::string &monitorElementName);

      /** Get the monitor element list
       */
      const MonitorElementPtrList &getMonitorElementList() const;

      /** Remove the directory and its contents
       */
      StatusCode removeDir(const std::string &dirName);

      /** Clear the directory.
       *  The operation is done recursively
       */
      StatusCode clear();

      /** Get the full path name of the directory
       */
      Path getFullPathName() const;

      /** Whether the directory is a root directory
       */
      bool isRootDir() const;

      /** Whether the directory is empty
       */
      bool isEmpty() const;

    private:

      /** Recursive print of sub directory structure (dirs and contents)
       */
      void ls(int depth) const;

      // members
      std::string                     m_name;
      Directory                      *m_pParentDir;
      std::vector<Directory*>         m_directoryList;
      MonitorElementPtrList           m_contentsList;
    };

  }

} 

#endif  //  DQM4HEP_DIRECTORY_H
