/// \file Graph1D.h
/*
*
* Graph1D.h header template automatically generated by a class generator
* Creation date : jeu. fï¿½vr. 2 2017
*
* This file is part of DQM4HEP libraries.
*
* DQM4HEP is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
* based upon these libraries are permitted. Any copy of these libraries
* must include this copyright notice.
*
* DQM4HEP is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
*
* @author Remi Ete
* @copyright CNRS , IPNL
*/


#ifndef GRAPH1D_H
#define GRAPH1D_H

#include "dqm4hep/MonitorObject.h"
#include "dqm4hep/DrawAttributes.h"

namespace dqm4hep {

  namespace core {

    /**
     * Graph1D class
     */
    class Graph1D final : public MonitorObject
    {
    public:
      /**
       * Point struct
       */
      struct Point
      {
        Point();
        Point(float x, float y);
        Point(float x, float y, float ex, float ey);
        Point(float x, float y, float exl, float exu, float eyl, float eyu);

        float m_x;
        float m_xErrLow;
        float m_xErrUp;
        float m_y;
        float m_yErrLow;
        float m_yErrUp;
      };

      typedef std::vector<Point> PointSet;

    public:
      /**
       * Property enum
       */
      enum Property
      {
        TITLE = 0,
        POINTS,
        AXIS_X,
        AXIS_Y,
        MARKER,
        LINE,
        N_PROPERTIES
      };

      /**
       * Constructor
       */
      Graph1D();

      /**
       * Destructor
       */
      ~Graph1D();

      /**
       * [create description]
       * @param  value [description]
       * @return       [description]
       */
      static Graph1D *create(const Json::Value &value);

      /**
       * [setTitle description]
       * @param title [description]
       */
      void setTitle(const std::string &title);

      /**
       * [getTitle description]
       * @return [description]
       */
      const std::string &getTitle() const;

      /**
       * [getMaximum description]
       * @return [description]
       */
      float getMaximum() const;

      /**
       * [getMinimum description]
       * @return [description]
       */
      float getMinimum() const;

      /**
       * [addPoint description]
       * @param point [description]
       * @return the index of the inserted point
       */
      int addPoint(const Graph1D::Point &point);

      /**
       * [setPoint description]
       * @param index [description]
       * @param point [description]
       */
      void setPoint(int index, const Graph1D::Point &point);

      /**
       * [getPoint description]
       * @param  index [description]
       * @return       [description]
       */
      const Graph1D::Point &getPoint(int index) const;

      /**
       * [getNPoints description]
       * @return [description]
       */
      unsigned int getNPoints() const;

      /**
       * [getPoints description]
       * @return [description]
       */
      const PointSet &getPoints() const;

      /**
       * [getPointX description]
       * @param  index [description]
       * @return       [description]
       */
      float getPointX(int index) const;

      /**
       * [getPointX description]
       * @param  index [description]
       * @return       [description]
       */
      float getPointY(int index) const;

      /**
       * [getPointErrors description]
       * @param index     [description]
       * @param errorXLow [description]
       * @param errorXUp  [description]
       * @param errorYLow [description]
       * @param errorYUp  [description]
       */
      void getPointErrors(int index, float &errorXLow, float &errorXUp, float &errorYLow, float &errorYUp) const;

      /**
       * [clear description]
       */
      void clear();

      /**
       * [setLineAttributes description]
       * @param attributes [description]
       */
      void setLineAttributes(const LineAttributes &attributes);

      /**
       * [getLineAttributes description]
       * @return [description]
       */
      const LineAttributes &getLineAttributes() const;

      /**
       * [setMarkerAttributes description]
       * @param attributes [description]
       */
      void setMarkerAttributes(const MarkerAttributes &attributes);

      /**
       * [getMarkerAttributes description]
       */
      const MarkerAttributes &getMarkerAttributes() const;

      /**
       * [setXAxisAttributes description]
       * @param axis [description]
       */
      void setXAxisAttributes(const AxisAttributes &attributes);

      /**
       * [getXAxisAttributes description]
       * @return [description]
       */
      const AxisAttributes &getXAxisAttributes() const;

      /**
       * [setYAxis description]
       * @param axis [description]
       */
      void setYAxisAttributes(const AxisAttributes &attributes);

      /**
       * [getYAxisAttributes description]
       * @return [description]
       */
      const AxisAttributes &getYAxisAttributes() const;

      // from monitor object
      bool isUpToDate() const;
      void fromJson(const Json::Value &value);
      void toJson(Json::Value &value, bool full = true, bool resetCache = true);
      MonitorObjectType getType() const;

    private:
      std::string                 m_title;
      PointSet                    m_points;
      float                       m_minimum;
      float                       m_maximum;

      // axis, marker and line attributes
      AxisAttributes              m_xAxisAttributes;
      AxisAttributes              m_yAxisAttributes;
      LineAttributes              m_lineAttributes;
      MarkerAttributes            m_markerAttributes;

      std::bitset<N_PROPERTIES>   m_updateCache;
    };

  }

}

#endif  //  GRAPH1D_H
