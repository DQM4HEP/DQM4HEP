/// \file DQMRunControl.h
/*
 *
 * DQMRunControl.h header template automatically generated by a class generator
 * Creation date : mar. oct. 7 2014
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQM4HEP_RUNCONTROL_H
#define DQM4HEP_RUNCONTROL_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"

namespace dqm4hep {

  namespace core {

    class Run;

    /** RunListener class
     */
    class RunListener
    {
    public:
      /** Destructor
       */
      virtual ~RunListener() {}

      /** Called back when a run is started
       */
      virtual void onStartOfRun(Run *const pRun) = 0;

      /** Called back when a run ends
       */
      virtual void onEndOfRun(const Run *const pRun) = 0;
    };

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    /** RunControl class
     */
    class RunControl
    {
    public:
      /** Constructor
       */
      RunControl();

      /** Constructor with name
       */
      RunControl(const std::string &runControlName);

      /** Destructor
       */
      virtual ~RunControl();

      /** Set the run control name. This stops the current before
       */
      virtual void setRunControlName(const std::string &runControlName);

      /** Get the run control name
       */
      virtual const std::string &getRunControlName() const;

      /** Create a new run from a Run
       *  The run control is the owner the run
       */
      virtual StatusCode startNewRun(Run *pRun, const std::string &password = "");

      /** Create a new run.
       *  End the current run if running
       */
      virtual StatusCode startNewRun(int runNumber, const std::string &description = "", const std::string &detectorName = "", const std::string &password = "");

      /** End the current run
       */
      virtual StatusCode endCurrentRun( const std::string &password = "" );

      /** Get the current run number
       */
      virtual int getCurrentRunNumber() const;

      /** Get the current run header
       */
      virtual Run *getCurrentRun() const;

      /** Get the run state (running or not)
       */
      virtual State getRunState() const;

      /** Whether a run has been started.
       */
      virtual bool isRunning() const;

      /** Set the password needed to start/stop runs
       */
      void setPassword( const std::string &password );

      /** Add a listener to the run control
       */
      virtual void addListener(RunListener *pListener);

      /** Remove a listener from the run control
       */
      virtual void removeListener(RunListener *pListener);

      /** Check run control password
       */
      bool checkPassword(const std::string &password);

    protected:
      State                            m_runState;
      Run                             *m_pCurrentRun;
      std::string                      m_runControlName;
      std::string                      m_password;
      std::vector<RunListener *>       m_listeners;
    };

  }

}

#endif  //  DQM4HEP_RUNCONTROL_H
