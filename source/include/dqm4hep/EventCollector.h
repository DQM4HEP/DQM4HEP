/*
 *
 * DQMEventCollector.h header template automatically generated by a class generator
 * Creation date : mer. sept. 9 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQM4HEP_EVENTCOLLECTOR_H
#define DQM4HEP_EVENTCOLLECTOR_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"

namespace dqm4hep {

  namespace core {

    class EventCollectorImp;

    /** EventCollector class
     */
    class EventCollector
    {
    public:
      /** Constructor
       */
      EventCollector();

      /** Constructor with collector implementation
       */
      EventCollector(EventCollectorImp *pCollectorImp);

      /** Destructor
       */
      ~EventCollector();

      /** Set the collctor name
       */
      StatusCode setCollectorName(const std::string &collectorName);

      /** Get the collector name
       */
      const std::string &getCollectorName() const;

      /** Whether the collector server is running
       */
      bool isRunning() const;

      /** Start the collector server
       */
      StatusCode startCollector();

      /** Stop the collector server
       */
      StatusCode stopCollector();

      /** Set the event collector implementation
       */
      void setEventCollectorImp(EventCollectorImp *pCollectorImp);

      /** Set the event streamer to serialize/deserialize the in/out-coming events
       */
      void setEventStreamer(EventStreamer *pEventStreamer);

      /** Get the event streamer
       */
      EventStreamer *getEventStreamer() const;

    private:

      EventCollectorImp *m_pCollectorImp;
    };

  }

} 

#endif  //  DQM4HEP_EVENTCOLLECTOR_H
