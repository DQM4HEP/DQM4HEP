  /// \file Histogram1D.h
/*
 *
 * Histogram1D.h header template automatically generated by a class generator
 * Creation date : jeu. fï¿½vr. 2 2017
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef HISTOGRAM1D_H
#define HISTOGRAM1D_H

#include "dqm4hep/DQM4HEP.h"
#include "dqm4hep/MonitorObject.h"

namespace dqm4hep {

  namespace core {

    /**
     * Histogram1D class
     */
    class Histogram1D final : public MonitorObject
    {
    public:
      typedef std::map<unsigned int, float>  HistogramMap;

     /**
      * Constructor
      */
     Histogram1D(const unsigned int nBins, const float &min, const float &max);

     /**
      * Destructor
      */
     ~Histogram1D();

     void setTitle(const std::string &title);
     const std::string &getTitle() const;

     unsigned int getNBins() const;
     float getMin() const;
     float getMax() const;
     float getBinWidth() const;

     float getBinContent(const unsigned int bin) const;
     unsigned int getBinNumber(const float value) const;

     unsigned int getMinBinNumber() const;
     unsigned int getMaxBinNumber() const;

     float getCumulativeSum() const;
     float getCumulativeSum(const unsigned int lowBin, const unsigned int highBin) const;

     void getMaximum(const unsigned int lowBin, const unsigned int highBin, float &maximumValue, unsigned int &maximumBin) const;
     void getMaximum(float &maximumValue, unsigned int &maximumBin) const;

     void getMinimum(const unsigned int lowBin, const unsigned int highBin, float &minimumValue, unsigned int &minimumBin) const;
     void getMinimum(float &minimumValue, unsigned int &minimumBin) const;

     float getMean(const unsigned int lowBin, const unsigned int highBin) const;
     float getMean() const;

     float getStdDeviation(const unsigned int lowBin, const unsigned int highBin) const;
     float getStdDeviation() const;

     float getRms(const unsigned int lowBin, const unsigned int highBin) const;
     float getRms() const;

     float getSkewness(const unsigned int lowBin, const unsigned int highBin) const;
     float getSkewness() const;


     void setBinContent(const unsigned int bin, const float value);
     void fill(const float value, const float weight = 1.f);
     void scale(const float scaleFactor);
     void clear();

     void setLineWidth(int width);
     void setLineColor(Color color);
     void setLineStyle(LineStyle style);
     void setLineAttributes(int width, Color color, LineStyle style);
     void getLineAttributes(int &width, Color &color, LineStyle &style) const;

     void setMarkerSize(int size);
     void setMarkerColor(Color color);
     void setMarkerColor(MarkerStyle style);
     void setMarkerAttributes(int size, Color color, MarkerStyle style);
     void getMarkerAttributes(int &size, Color &color, MarkerStyle &style) const;

     void setFillColor(Color color);
     void setFillStyle(FillStyle style);
     void setFillAttributes(Color color, FillStyle style);
     void getFillAttributes(Color &color, FillStyle &style);

     const Axis &getXAxis() const;
     Axis &getXAxis();
     const Axis &getYAxis() const;
     Axis &getYAxis();

     const HistogramMap &getBins() const;

   private:
     const unsigned int          m_nBins;
     const float                 m_min;
     const float                 m_max;
     const float                 m_binWidth;
     HistogramMap                m_histogramMap;

     std::string                 m_title;
     Axis                        m_xAxis;
     Axis                        m_yAxis;
    };

  }

}

#endif  //  HISTOGRAM1D_H
