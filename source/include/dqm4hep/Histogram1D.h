/// \file Histogram1D.h
/*
*
* Histogram1D.h header template automatically generated by a class generator
* Creation date : jeu. f�vr. 2 2017
*
* This file is part of DQM4HEP libraries.
*
* DQM4HEP is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
* based upon these libraries are permitted. Any copy of these libraries
* must include this copyright notice.
*
* DQM4HEP is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
*
* @author Remi Ete
* @copyright CNRS , IPNL
*/


#ifndef HISTOGRAM1D_H
#define HISTOGRAM1D_H

#include "dqm4hep/DQM4HEP.h"
#include "dqm4hep/MonitorObject.h"
#include "dqm4hep/DrawAttributes.h"

namespace dqm4hep {

  namespace core {

    // TODO :
    // Add a comparison measurement between two histograms
    // http://docs.opencv.org/2.4/doc/tutorials/imgproc/histograms/histogram_comparison/histogram_comparison.html
    // Implements these four tests.
    //
    // From https://en.wikipedia.org/wiki/Statistical_distance :
    // Kullback–Leibler divergence : https://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence
    // Hellinger distance : https://en.wikipedia.org/wiki/Hellinger_distance

    /**
    * Histogram1D class
    */
    class Histogram1D final : public MonitorObject
    {
    public:
      typedef std::map<unsigned int, float>  HistogramMap;

      enum DrawOption
      {
        ERROR_BARS,       ///< Draw error bars on bins
        SMOOTH_CURVE,     ///< Draw a smooth curve through the histogram bins
        MARKER_BIN        ///< Draw marker at each bin
      };

      /**
       * Property enum
       */
      enum Property
      {
        TITLE = 0,
        BINS,
        AXIS_X,
        AXIS_Y,
        MARKER,
        LINE,
        FILL,
        N_PROPERTIES
      };

      /**
       * Constructor
       */
      Histogram1D();

      /**
      * Constructor
      */
      Histogram1D(const unsigned int nBins, const float &min, const float &max);

      /**
      * Destructor
      */
      ~Histogram1D();

      /**
      * [setTitle description]
      * @param title [description]
      */
      void setTitle(const std::string &title);

      /**
      * [getTitle description]
      * @return [description]
      */
      const std::string &getTitle() const;

      /**
      * [getNBins description]
      * @return [description]
      */
      unsigned int getNBins() const;

      /**
      * [getMin description]
      * @return [description]
      */
      float getMin() const;

      /**
      * [getMax description]
      * @return [description]
      */
      float getMax() const;

      /**
      * [getBinWidth description]
      * @return [description]
      */
      float getBinWidth() const;

      /**
      * [getBinContent description]
      * @param  bin [description]
      * @return     [description]
      */
      float getBinContent(const unsigned int bin) const;

      /**
      * [getBinNumber description]
      * @param  value [description]
      * @return       [description]
      */
      int getBinNumber(const float value) const;

      /**
      * [getMinBinNumber description]
      * @return [description]
      */
      unsigned int getMinBinNumber() const;

      /**
      * [getMaxBinNumber description]
      * @return [description]
      */
      unsigned int getMaxBinNumber() const;

      /**
       * [getCumulativeSum description]
       * @return [description]
       */
      float getCumulativeSum() const;

      /**
       * [getCumulativeSum description]
       * @param  lowBin  [description]
       * @param  highBin [description]
       * @return         [description]
       */
      float getCumulativeSum(const unsigned int lowBin, const unsigned int highBin) const;

      /**
       * [getMaximum description]
       * @param lowBin       [description]
       * @param highBin      [description]
       * @param maximumValue [description]
       * @param maximumBin   [description]
       */
      void getMaximum(const unsigned int lowBin, const unsigned int highBin, float &maximumValue, int &maximumBin) const;

      /**
       * [getMaximum description]
       * @param maximumValue [description]
       * @param maximumBin   [description]
       */
      void getMaximum(float &maximumValue, int &maximumBin) const;

      /**
       * [getMean description]
       * @param  lowBin  [description]
       * @param  highBin [description]
       * @return         [description]
       */
      float getMean(const unsigned int lowBin, const unsigned int highBin) const;

      /**
       * [getMean description]
       * @return [description]
       */
      float getMean() const;

      /**
       * [getStdDeviation description]
       * @param  lowBin  [description]
       * @param  highBin [description]
       * @return         [description]
       */
      float getStdDeviation(const unsigned int lowBin, const unsigned int highBin) const;

      /**
       * [getStdDeviation description]
       * @return [description]
       */
      float getStdDeviation() const;

      /**
       * [setBinContent description]
       * @param bin   [description]
       * @param value [description]
       */
      void setBinContent(const unsigned int bin, const float value);

      /**
       * [fill description]
       * @param value  [description]
       * @param weight [description]
       */
      void fill(const float value, const float weight = 1.f);

      /**
       * [scale description]
       * @param scaleFactor [description]
       */
      void scale(const float scaleFactor);

      /**
       * [setLineAttributes description]
       * @param attributes [description]
       */
      void setLineAttributes(const LineAttributes &attributes);

      /**
       * [getLineAttributes description]
       * @return [description]
       */
      const LineAttributes &getLineAttributes() const;

      /**
       * [setMarkerAttributes description]
       * @param attributes [description]
       */
      void setMarkerAttributes(const MarkerAttributes &attributes);

      /**
       * [getMarkerAttributes description]
       */
      const MarkerAttributes &getMarkerAttributes() const;

      /**
       * [setFillAttributes description]
       * @param attributes [description]
       */
      void setFillAttributes(const FillAttributes &attributes);

      /**
       * [getFillAttributes description]
       */
      const FillAttributes &getFillAttributes() const;

      /**
       * [setXAxisAttributes description]
       * @param axis [description]
       */
      void setXAxisAttributes(const AxisAttributes &attributes);

      /**
       * [getXAxisAttributes description]
       * @return [description]
       */
      const AxisAttributes &getXAxisAttributes() const;

      /**
       * [setYAxis description]
       * @param axis [description]
       */
      void setYAxisAttributes(const AxisAttributes &attributes);

      /**
       * [getYAxisAttributes description]
       * @return [description]
       */
      const AxisAttributes &getYAxisAttributes() const;

      void fromJson(const Json::Value &value);
      void toJson(Json::Value &value, bool full = true, bool resetCache = true);
      bool isUpToDate() const;
      MonitorObjectType getType() const;
      void clear();

    private:
      unsigned int                m_nBins;
      float                       m_min;
      float                       m_max;
      float                       m_binWidth;

      std::string                 m_title;
      float                      *m_pHistogramBins;
      float                       m_cumulativeSum;
      float                       m_cumulativeSumX;
      float                       m_cumulativeSumXX;
      int                         m_maximumBin;
      float                       m_maximumValue;

      // axis, marker, line and fill attributes
      AxisAttributes              m_xAxisAttributes;
      AxisAttributes              m_yAxisAttributes;
      LineAttributes              m_lineAttributes;
      MarkerAttributes            m_markerAttributes;
      FillAttributes              m_fillAttributes;

      // internal stuff
      std::bitset<N_PROPERTIES>   m_updateCache;
    };

  }

}

#endif  //  HISTOGRAM1D_H
