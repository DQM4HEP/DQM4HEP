  /// \file MonitorObject.h
/*
 *
 * MonitorObject.h header template automatically generated by a class generator
 * Creation date : jeu. fï¿½vr. 2 2017
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef MONITOROBJECT_H
#define MONITOROBJECT_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"
#include "dqm4hep/Signal.h"

// -- json headers
#include "json/json.h"

// -- std headers
#include <bitset>

namespace dqm4hep {

  namespace core {

    /**
     * MonitorObjectType enum
     */
    enum MonitorObjectType
    {
      UNKNOWN_MONITOR_OBJECT = 0,
      HISTOGRAM_1D,
      HISTOGRAM_2D,
      GRAPH_1D,
      PIE_CHART,
      SUMMARY,
      INTEGER_OBJECT,
      UNSIGNED_INTEGER_OBJECT,
      FLOAT_OBJECT,
      DOUBLE_OBJECT,
      STRING_OBJECT,
      LONG_INTEGER_OBJECT,
      SHORT_INTEGER_OBJECT
    };

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    /**
     * MonitorObject class
     */
    class MonitorObject
    {
    public:
     /**
      * Constructor
      */
     MonitorObject();

     /**
      * Destructor
      */
     virtual ~MonitorObject();

     /**
      * Get the update signal.
      * May be use like this :
      *
      * @code
      * monitorObject->onUpdate().connect(myClass, &MyClass::handler);
      * @endcode
      */
     Signal<int> &onUpdate();

     /**
      * [fromJson description]
      * @param value [description]
      */
     virtual void fromJson(const Json::Value &value) = 0;

     /**
      * [toJson description]
      * @param value [description]
      * @param full  [description]
      */
     virtual void toJson(Json::Value &value, bool full = true, bool resetCache = true) = 0;

     /**
      * [isUpToDate description]
      * @return [description]
      */
     virtual bool isUpToDate() const = 0;

     /**
      * Get the monitor object type
      */
     virtual MonitorObjectType getType() const;

   protected:
     /**
      * [updated description]
      * @param property [description]
      */
     void updated(int property);

   private:
      Signal<int>                                   m_updateSignal;
    };

  }

}

#endif  //  MONITOROBJECT_H
