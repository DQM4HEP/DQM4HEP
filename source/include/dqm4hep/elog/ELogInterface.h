/// \file ELogInterface.h
/*
 *
 * ELogInterface.h header template automatically generated by a class generator
 * Creation date : mar. juin 2 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQM4HEP_ELOGINTERFACE_H
#define DQM4HEP_ELOGINTERFACE_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"

namespace dqm4hep {

  namespace core {

    typedef std::map<std::string, std::string>  LogbookEntryMap;
    typedef LogbookEntryMap::value_type         LogbookEntry;

    class ELog
    {
      /** Encoding enumerator
       */
      enum Encoding
      {
        ELOG_CODE,
        PLAIN,
        HTML
      };

    public:
      /** Default constructor
       *
       * 	Default command is defined as DQM4HEP_ELOG_COMMAND
       *  in DQMCoreConfig.h
       */
      ELog();

      /** Constructor with host and port
       */
      ELog(const std::string &host, int port);

      /** Constructor with host, port, user name and password
       */
      ELog(const std::string &host, int port, const std::string &userName, const std::string &password);

      /** Set the host of the logbook
       */
      void setHost(const std::string &host);

      /** Set the port on which the entries will be logged.
       */
      void setPort(int port);

      /** Set the user name for the logbook
       */
      void setUser(const std::string &user);

      /** Set the password for the logbook
       */
      void setPassword(const std::string &password);

      /** Set the logbook in which the entries will be published
       */
      void setLogbook(const std::string &logbook);

      /** Whether to use ssl to log.
       *
       *  Default is false
       */
      void useSSL(bool useSSL);

      /** Set the logbook encoding
       *
       *  Default is ELog::PLAIN
       */
      void setEncoding(Encoding encoding);

      /** Whether to suppres notification.
       *
       *  Default is false
       */
      void suppressEmailNotification(bool suppress);

      /** Add an entry to the next logbook publication
       */
      StatusCode addEntry(const std::string &name, const std::string &value);

      /** Add an entry to the next logbook publication
       */
      StatusCode addEntry(const LogbookEntry &entry);

      /** Add entries to the next logbook publication
       */
      StatusCode addEntries(const LogbookEntryMap &entryMap);

      /** Set the message that will goes in the next logged entry
       */
      void setMessage(const std::string &message);

      /** Log in the logbook.
       *
       *  User must have set the logbook name, user name and password.
       *  Command not run if nothing was added with addEntry() functions
       */
      StatusCode log();

      /** Log in the logbook.
       *
       *  User must have set the logbook name, user name and password.
       *  Command not run if the map is empty.
       */
      StatusCode log(const LogbookEntryMap &entryMap, const std::string &message = "");

      /** Log in the logbook.
       *
       * 	User must have set the user name, password.
       *  Command not run if nothing was added with addEntry() functions
       */
      StatusCode log(const std::string &logbook);

      /** Log in the logbook.
       *
       * 	User must have set the user name, password.
       *  Command not run if the map is empty.
       */
      StatusCode log(const std::string &logbook, const LogbookEntryMap &entryMap, const std::string &message = "");

      /** Clear the ELog interface.
       *
       *  Remove all previously added entries
       */
      void clear();

    private:

      /**
       */
      bool checkConsistency() const;

      /** Process the elog command.
       *
       *  The user input has to be valid (see checkConsistency())
       */
      int processELogCommand() const;

    private:

      std::string                      m_eLogCommand;
      std::string                      m_host;
      int                              m_port;
      std::string                      m_userName;
      std::string                      m_password;
      std::string                      m_logbook;
      std::string                      m_message;
      LogbookEntryMap                  m_logbookEntryMap;
      Encoding                         m_encoding;
      bool                             m_useSSL;
      bool                             m_suppresssEmailNotification;
    };

  }

} 

#endif  //  DQM4HEP_ELOGINTERFACE_H
