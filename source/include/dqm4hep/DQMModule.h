/// \file DQMModule.h
/*
 *
 * DQMModule.h header template automatically generated by a class generator
 * Creation date : ven. sept. 5 2014
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQM4HEP_MODULE_H
#define DQM4HEP_MODULE_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"
#include "dqm4hep/DQMVersion.h"

namespace dqm4hep {

  namespace core {

    class Archiver;
    class Event;
    class ModuleApplication;
    class TiXmlHandle;

    /** Module base class.
     *
     *  Base class for monitor element booking modules.
     *  See daughter classes for specific implementations.
     *
     * 	@author R.Ete
     */
    class Module
    {
      friend class ModuleApi;           // to book monitor elements
      friend class Archiver;            // to archive monitor elements
      friend class ModuleApplication;   // to run it

    public:
      /** Constructor
       */
      Module();

      /** Destructor
       */
      virtual ~Module();

      /** Get the module name
       */
      const std::string &getName() const;

      /** Get the detector name associated to this module
       */
      const std::string &getDetectorName() const;

      /** Get the module version
       */
      const Version &getVersion() const;

      /** Initialize the module.
       *  It is generally in this method that monitor elements are booked.
       */
      virtual StatusCode initModule() = 0;

      /** Read the input settings from a xml handle
       */
      virtual StatusCode readSettings( const TiXmlHandle handle ) = 0;

      /** Called at start of cycle.
       *
       *  User can reset the monitor elements if needed in this method.
       */
      virtual StatusCode startOfCycle() = 0;

      /** Called at end of cycle before publishing monitor elements
       *
       *  User should not reset monitor elements in this method.
       *  Generally used to set the quality of monitor elements or
       *  set some of them to do not be published.
       */
      virtual StatusCode endOfCycle() = 0;

      /** End the module.
       *
       *  Called at termination of the process.
       */
      virtual StatusCode endModule() = 0;

    protected:
      /** Set the detector name for this module
       */
      void setDetectorName( const std::string &detectorName );

      /** Set the module name
       */
      void setName( const std::string &name );

      /** Set the module version
       */
      void setVersion(unsigned int major, unsigned int minor, unsigned int patch);

    private:
      /** Get the module application in which the module is registered
       */
      ModuleApplication *getModuleApplication() const;

      /** Set the module application in which the module is registered
       */
      void setModuleApplication(ModuleApplication *pModuleApplication);

      // members
      std::string                   m_name;                       ///< The module name
      std::string                   m_detectorName;               ///< The detector name for this module
      Version                       m_version;                    ///< The module version
      ModuleApplication            *m_pModuleApplication;         ///< The monitor element manager
    };

  }

} 

#endif  //  DQM4HEP_MODULE_H
