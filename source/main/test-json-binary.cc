  /// \file test-json-binary.cc
/*
 *
 * test-json-binary.cc source template automatically generated by a class generator
 * Creation date : sam. dï¿½c. 3 2016
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "dqm4hep/Base64Helper.h"
#include "json/json.h"
#include "xdrstream/xdrstream.h"

using namespace dqm4hep::net;

int main(int argc, char **argv)
{
  Json::Value jsonValue;

  // write test
  xdrstream::BufferDevice writeBuffer;

  uint32_t w_a = 42;
  bool w_b = false;
  std::string w_c = "A test string";

  writeBuffer.write<uint32_t>(&w_a);
  writeBuffer.write<bool>(&w_b);
  writeBuffer.write(&w_c);

  std::string writeBase64Str;
  Base64Helper::writeToBase64(&writeBuffer, writeBase64Str);
  jsonValue["type"] = "binary";
  jsonValue["content"] = writeBase64Str;

  Json::StyledWriter jsonWriter;
  std::cout << jsonWriter.write(jsonValue) << std::endl;


  //read test
  uint32_t r_a;
  bool r_b;
  std::string r_c;

  std::string buffer64Str(jsonValue["content"].asString());
  char *tmp = new char[1]; tmp[0] = '\0';
  xdrstream::BufferDevice readBuffer(tmp, 1, false);

  Base64Helper::readFromBase64(&readBuffer, buffer64Str);

  readBuffer.read(&r_a);
  readBuffer.read(&r_b);
  readBuffer.read(&r_c);

  std::cout << "Read values : " << std::endl;
  std::cout << " => " << r_a << std::endl;
  std::cout << " => " << r_b << std::endl;
  std::cout << " => " << r_c << std::endl;

  return 0;
}



