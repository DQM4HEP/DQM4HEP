/**
 * A javascript client interface to dim web bridge. The provided classes allow
 * to connect to one or many dim web bridge(s), enabling dim service subscription,
 * command sending and rpc handling in javascript code
 *
 * @summary Javascript DIM client interface
 * @author Remi Ete
 * @copyright Remi Ete
 * @since 03.18.2017
 */

var dim = {
  // default web bridge port
  defaultPort : 2511,

  // default web bridge host
  defaultHost : "localhost",

  // time interval to reconnect if service disconnects
  autoReconnect : 2000,

  // types used by DIM
  types : {
    integer : 0,
    float : 1,
    double : 2,
    short : 3,
    longlong : 4,
    string : 5,
    binary : 6
  },

  // websocket routes used by the web bridge
  websockets : {
    browser : {
      getServices : "browser/getServices",
      getServers : "browser/getServers",
      getServerServices : "browser/getServerServices",
      getServerClients : "browser/getServerClients"
    },
    command : "command",
    rpc : "rpc",
    subscribe : "subscribe",
    unsubscribe : "unsubscribe"
  }
};

//---------------------------------------------------------------------------------
//---------------------------------------------------------------------------------

/**
 * Utility function to create a websocket
 *
 * @param  {dim.DimClient} client the dim client interface
 * @param  {string}        route  the websocket route
 * @return {WebSocket}            a configured websocket
 */
dim.createWebSocket = function(client, route) {
  return new WebSocket("ws://" + client.host + ":" + client.port + "/" + route);
};

//---------------------------------------------------------------------------------
//---------------------------------------------------------------------------------

/**
 * Main dim client interface. Connect to a dim web bridge using websockets
 * and thus can handle service subscription, command sending and rpc handling
 *
 * @param {string} host the web bridge host to connect
 * @param {port}   port the web bridget port to connect
 */
dim.DimClient = function (host, port) {
  this.host = typeof host === 'undefined' ? dim.defaultHost : host;
  this.port = typeof port === 'undefined' ? dim.defaultPort : port;
  this.errorHandler = null;

  /**
   * Internal utility class for service handling.
   *
   * @param {dim.DimClient} client  the dim client interface
   * @param {string} route   the websocket route
   * @param {function} handler the service callback function on service update
   */
  var ServiceWebSocket = function (client, route, handler) {
    this.ws = dim.createWebSocket(client, route);
    this.url = this.ws.url;
    this.handler = handler;
    var self = this;

    var configureWebSocket = function () {
      self.ws.addEventListener('message', self.onmessage);
      self.ws.addEventListener('close', self.onclose);
    };

    var reconnect = function() {
      self.ws = new WebSocket(this.url);
      self.configureWebSocket();
    };

    var onmessage = function(message) {
      self.handler(message);
    };

    var onclose = function(code, reason) {
      // reconnect on unexpected websocket close
      if(code != 1000) {
        setTimeout(self.reconnect, dim.autoReconnect);
      }
    };

    configureWebSocket();
  };

  /**
   * Send a dim command
   * @param  {string} commandName the command name
   * @param  {*}      commandData the command data to send
   * @param  {number} commandType the type of command (see dim.types enum)
   */
  this.sendCommand = function(commandName, commandData, commandType) {

    var ws = dim.createWebSocket(this, dim.websockets.command);

    var command = {
      name : commandName,
      data : commandData,
      type : commandType,
    };

    var jsonCommand = JSON.stringify(command);
    var connectionOpened = false;

    ws.addEventListener('open', function(event) {
      connectionOpened = true;
      ws.send(jsonCommand);
      ws.close(1000);
    });

    ws.addEventListener('error', function(event) {
      if(this.errorHandler != null) {
        this.errorHandler(0);
      }
    });

    ws.addEventListener('close', function(event) {
      if(!connectionOpened) {
        console.log("dim.Client.sendCommand: server is not responding !");
        if(this.errorHandler != null) {
          this.errorHandler(0);
        }
      }
    });

  };


  /**
   * Send an integer using a dim command
   *
   * @param  {string} commandName the command name
   * @param  {number} commandData the command data to send
   */
  this.sendIntCommand = function(commandName, commandData) {

    if(typeof commandData !== 'number')
      return;

    this.sendCommand(commandName, commandData, dim.types.integer);
  };


  /**
   * Send a float using a dim command
   *
   * @param  {string} commandName the command name
   * @param  {number} commandData the command data to send
   */
  this.sendFloatCommand = function(commandName, commandData) {

    if(typeof commandData !== 'number')
      return;

    this.sendCommand(commandName, commandData, dim.types.float);
  };


  /**
   * Send a float using a dim command
   *
   * @param  {string} commandName the command name
   * @param  {number} commandData the command data to send
   */
  this.sendDoubleCommand = function(commandName, commandData) {

    if(typeof commandData !== 'number')
      return;

    this.sendCommand(commandName, commandData, dim.types.double);
  };


  /**
   * Send a short integer using a dim command
   *
   * @param  {string} commandName the command name
   * @param  {number} commandData the command data to send
   */
  this.sendShortCommand = function(commandName, commandData) {

    if(typeof commandData !== 'number')
      return;

    this.sendCommand(commandName, commandData, dim.types.short);
  };

  /**
   * Send a long long integer using a dim command
   *
   * @param  {string} commandName the command name
   * @param  {number} commandData the command data to send
   */
  this.sendLongLongCommand = function(commandName, commandData) {

    if(typeof commandData !== 'number')
      return;

    this.sendCommand(commandName, commandData, dim.types.longlong);
  };


  /**
   * Send a string using a dim command
   *
   * @param  {string} commandName the command name
   * @param  {number} commandData the command data to send
   */
  this.sendStringCommand = function(commandName, commandData) {

    if(typeof commandData !== 'string')
      return;

    this.sendCommand(commandName, commandData, dim.types.string);
  };



  // Find a way to transfer binary data !
  // dim.DimClient.prototype.sendBinaryCommand = function(commandName, commandData) {
  //   this.sendCommand(commandName, commandData, dim.types.binary);
  // };



  /**
   * Send a request (RpcInfo equivalent)
   *
   * @param  {Object}   params           the request parameters
   * @param  {string}   params.rpcName
   * @param  {number}   params.intype
   * @param  {number}   params.outtype
   * @param  {*}        params.rpcData   the rpc data to send
   * @param  {*}        params.rpcNolink the rpc data to receive if the rpc is not available
   * @param  {function} handler          the callback function on rpc answer reception
   */
  this.sendRequest = function(params, handler) {

    var ws = dim.createWebSocket(this, dim.websockets.rpc);

    var rpc = {
      name : params.rpcName,
      intype : params.intype,
      outtype : params.outtype,
      data : params.data,
      nolink : params.nolink
    };

    var jsonRpc = JSON.stringify(rpc);
    var connectionOpened = false;

    ws.addEventListener('open', function(event) {
      connectionOpened = true;
      ws.send(jsonRpc);
    });

    ws.addEventListener('message', function(event) {
      handler(event.data);
      ws.close(1000); // close with OK status
    });

    ws.addEventListener('error', function(event) {
      if(this.errorHandler != null) {
        this.errorHandler(0);
      }
    });

    ws.addEventListener('close', function(event) {
      if(!connectionOpened) {
        console.log("dim.Client.sendRequest: server is not responding !");
        if(this.errorHandler != null) {
          this.errorHandler(0);
        }
        handler(rpcNolink);
      }
    });

  };


  /**
   * Get the current dim service content (DimCurrentInfo equivalent)
   *
   * @param  {string}   serviceName the service to query the current content
   * @param  {function} handler     the callback function to receive the service content
   * @param  {*}        nolink      the service data to receive in case the service is not available
   */
  this.getCurrentServiceContent = function(serviceName, handler, nolink) {

    var ws = dim.createWebSocket(this, dim.websockets.currentInfo);

    var service = {
      name : serviceName,
      nolink : nolink
    };

    var jsonService = JSON.stringify(jsonService);
    var connectionOpened = false;

    ws.addEventListener('open', function(event) {
      connectionOpened = true;
      ws.send(jsonService);
    });

    ws.addEventListener('message', function(event) {
      var result = JSON.parse(event.data);
      handler(result);
      ws.close(1000); // close with OK status
    });

    ws.addEventListener('error', function(event) {
      if(this.errorHandler != null) {
        this.errorHandler(0);
      }
    });

    ws.addEventListener('close', function(event) {
      if(!connectionOpened) {
        console.log("dim.Client.getCurrentInfo: server is not responding !");
        if(this.errorHandler != null) {
          this.errorHandler(0);
        }
      }
    });

  };


  /**
   * Subscribe to dim service (DimInfo equivalent)
   *
   * @param  {Object} metadata the service info to subscribe
   * @param  {string} metadata.name the service name
   * @param  {number} metadata.time the update interval of the dim service (optional)
   * @param  {*}      metadata.nolink the data to receive in case the service is not available
   * @param  {function} handler  the callback function to receive service updates
   */
  this.subscribe = function(metadata, handler) {

    var ws = dim.createWebSocket(this, dim.websockets.subscribe);
    var self = this;

    var service = {
      name : metadata.serviceName,
      time : 0,
      nolink : null
    };

    for (var key in service) {
      if (typeof metadata[key] !== 'undefined') {
        service[key] = metadata[key];
      }
    }

    var jsonService = JSON.stringify(service);

    ws.addEventListener('open', function(event) {
      connectionOpened = true;
      ws.send(jsonService);
    });

    ws.addEventListener('message', function(event) {
      var result = JSON.parse(event.data);
      var route = result.route;
      // create the service websocket
      var svcWs = new dim.ServiceWebSocket(this, route, handler);
      ws.close(1000);
    });

    ws.addEventListener('error', function(event) {
      if(this.errorHandler != null) {
        this.errorHandler(0);
      }
    });

    ws.addEventListener('close', function(event) {
      if(!connectionOpened) {
        console.log("dim.Client.getCurrentInfo: server is not responding !");
        if(this.errorHandler != null) {
          this.errorHandler(0);
        }
      }
    });

  };
};


//---------------------------------------------------------------------------------
//---------------------------------------------------------------------------------

/**
 * Utility class to browse the dim dns node
 *
 * @param {dim.DimClient} client the client handling the web bridge server
 */
dim.DimBrowser = function(client) {
  this.client = client;

  /**
   * Send a request to the web bridge server
   *
   * @param  {string} route    the websocket route
   * @param  {string} request  the request to send via the websocket
   * @param  {string} property the property to extract from the received object
   * @param  {function} handler  the callback function to handle the answer
   */
  var performBrowserRequest = function (route, request, property, handler) {

    var ws = dim.createWebSocket(this.client, route);
    var connectionOpened = false;

    ws.addEventListener('message', function(event) {
      var result = JSON.parse(event.data);

      if(result.hasOwnProperty(property)) {
        handler(result[property]);
      }
      else {
        handler([]);
      }

      ws.close();
    });

    ws.addEventListener('open', function(event) {
      connectionOpened = true;
      ws.send(request);
    });

    ws.addEventListener('close', function(event) {

      if(!connectionOpened) {
        console.log("dim.DimBrowser: server is not responding !");
        handler([]);
      }
    });
  };


  /**
   * Get all available services given a pattern.
   *
   * Example :
   *   browser.getServices("RUN_CTRL/*");
   *   browser.getServices("*"); // get all services
   *
   * @param  {string}   serviceName the service pattern
   * @param  {function} handler     the callback function to receive the service list
   */
  this.getServices = function(serviceName, handler) {
    performBrowserRequest(dim.websockets.browser.getServices, serviceName, "services", handler);
  };


  /**
   * Get all available servers on the dim dns node
   *
   * @param  {function} handler the callback function to receive the server list
   */
  this.getServers = function(handler) {
    performBrowserRequest(dim.websockets.browser.getServers, "", "servers", handler);
  };


  /**
   * Get all services for a target dim server
   *
   * @param  {string}   serverName the dim server name
   * @param  {function} handler    the callback function to receive the server service list
   */
  this.getServerServices = function(serverName, handler) {
    performBrowserRequest(dim.websockets.browser.getServerServices, serverName, "serverServices", handler);
  };


  /**
   * Get all client connected to a target dim server
   *
   * @param  {string}   serverName the dim server name
   * @param  {function} handler    the callback function to receive the client list
   */
  this.getServerClients = function(serverName, handler) {
    performBrowserRequest(dim.websockets.browser.getServerClients, serverName, "serverClients", handler);
  };

};
